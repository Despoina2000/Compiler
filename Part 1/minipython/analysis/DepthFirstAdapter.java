/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPGoal().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getGroupFuncStat().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupFuncStat) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAFunction(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getGroupEqVal() != null)
        {
            node.getGroupEqVal().apply(this);
        }
        {
            Object temp[] = node.getGroupCommaIdEqVal().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaIdEqVal) temp[i]).apply(this);
            }
        }
        outAArgument(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getOrComp() != null)
        {
            node.getOrComp().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getOrComp() != null)
        {
            node.getOrComp().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getGroupCommaExpr().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaExpr) temp[i]).apply(this);
            }
        }
        outAPrintStatement(node);
    }

    public void inAAssingStatement(AAssingStatement node)
    {
        defaultIn(node);
    }

    public void outAAssingStatement(AAssingStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssingStatement(AAssingStatement node)
    {
        inAAssingStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCompEqs() != null)
        {
            node.getCompEqs().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssingStatement(node);
    }

    public void inAArrayStatement(AArrayStatement node)
    {
        defaultIn(node);
    }

    public void outAArrayStatement(AArrayStatement node)
    {
        defaultOut(node);
    }

    public void caseAArrayStatement(AArrayStatement node)
    {
        inAArrayStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAArrayStatement(node);
    }

    public void inAAssertStatement(AAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatement(AAssertStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        inAAssertStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getAssert() != null)
        {
            node.getAssert().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getGroupCommaExpr() != null)
        {
            node.getGroupCommaExpr().apply(this);
        }
        outAAssertStatement(node);
    }

    public void inAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        inAFunctionCallStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallStatement(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getAdditionSubition() != null)
        {
            node.getAdditionSubition().apply(this);
        }
        outAAddExpression(node);
    }

    public void inAIdBrExpression(AIdBrExpression node)
    {
        defaultIn(node);
    }

    public void outAIdBrExpression(AIdBrExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdBrExpression(AIdBrExpression node)
    {
        inAIdBrExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outAIdBrExpression(node);
    }

    public void inAFunctionCExpression(AFunctionCExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionCExpression(AFunctionCExpression node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCExpression(AFunctionCExpression node)
    {
        inAFunctionCExpression(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inALenExpression(ALenExpression node)
    {
        defaultIn(node);
    }

    public void outALenExpression(ALenExpression node)
    {
        defaultOut(node);
    }

    public void caseALenExpression(ALenExpression node)
    {
        inALenExpression(node);
        if(node.getLen() != null)
        {
            node.getLen().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outALenExpression(node);
    }

    public void inAExprMaxMinExpression(AExprMaxMinExpression node)
    {
        defaultIn(node);
    }

    public void outAExprMaxMinExpression(AExprMaxMinExpression node)
    {
        defaultOut(node);
    }

    public void caseAExprMaxMinExpression(AExprMaxMinExpression node)
    {
        inAExprMaxMinExpression(node);
        if(node.getMaxMin() != null)
        {
            node.getMaxMin().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        {
            Object temp[] = node.getGroupCommaVal().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaVal) temp[i]).apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAExprMaxMinExpression(node);
    }

    public void inAGroupExpressionInBrExpression(AGroupExpressionInBrExpression node)
    {
        defaultIn(node);
    }

    public void outAGroupExpressionInBrExpression(AGroupExpressionInBrExpression node)
    {
        defaultOut(node);
    }

    public void caseAGroupExpressionInBrExpression(AGroupExpressionInBrExpression node)
    {
        inAGroupExpressionInBrExpression(node);
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getGroupCommaExpr().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaExpr) temp[i]).apply(this);
            }
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outAGroupExpressionInBrExpression(node);
    }

    public void inASimplyImportImportType(ASimplyImportImportType node)
    {
        defaultIn(node);
    }

    public void outASimplyImportImportType(ASimplyImportImportType node)
    {
        defaultOut(node);
    }

    public void caseASimplyImportImportType(ASimplyImportImportType node)
    {
        inASimplyImportImportType(node);
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        if(node.getGroupAsId() != null)
        {
            node.getGroupAsId().apply(this);
        }
        {
            Object temp[] = node.getGroupMod().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupMod) temp[i]).apply(this);
            }
        }
        outASimplyImportImportType(node);
    }

    public void inAFromInportImportType(AFromInportImportType node)
    {
        defaultIn(node);
    }

    public void outAFromInportImportType(AFromInportImportType node)
    {
        defaultOut(node);
    }

    public void caseAFromInportImportType(AFromInportImportType node)
    {
        inAFromInportImportType(node);
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getGroupAsId() != null)
        {
            node.getGroupAsId().apply(this);
        }
        {
            Object temp[] = node.getGroupCommaId().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaId) temp[i]).apply(this);
            }
        }
        outAFromInportImportType(node);
    }

    public void inAModule(AModule node)
    {
        defaultIn(node);
    }

    public void outAModule(AModule node)
    {
        defaultOut(node);
    }

    public void caseAModule(AModule node)
    {
        inAModule(node);
        {
            Object temp[] = node.getGroupIdDot().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupIdDot) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAModule(node);
    }

    public void inACompareExpressionComparison(ACompareExpressionComparison node)
    {
        defaultIn(node);
    }

    public void outACompareExpressionComparison(ACompareExpressionComparison node)
    {
        defaultOut(node);
    }

    public void caseACompareExpressionComparison(ACompareExpressionComparison node)
    {
        inACompareExpressionComparison(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getCompTypes() != null)
        {
            node.getCompTypes().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outACompareExpressionComparison(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseComparison(node);
    }

    public void inAFunctionCall(AFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCall(AFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        inAFunctionCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArglist() != null)
        {
            node.getArglist().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFunctionCall(node);
    }

    public void inAGroupExpressionArglist(AGroupExpressionArglist node)
    {
        defaultIn(node);
    }

    public void outAGroupExpressionArglist(AGroupExpressionArglist node)
    {
        defaultOut(node);
    }

    public void caseAGroupExpressionArglist(AGroupExpressionArglist node)
    {
        inAGroupExpressionArglist(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getGroupCommaExpr().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaExpr) temp[i]).apply(this);
            }
        }
        outAGroupExpressionArglist(node);
    }

    public void inAValuePower(AValuePower node)
    {
        defaultIn(node);
    }

    public void outAValuePower(AValuePower node)
    {
        defaultOut(node);
    }

    public void caseAValuePower(AValuePower node)
    {
        inAValuePower(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValuePower(node);
    }

    public void inADmultPower(ADmultPower node)
    {
        defaultIn(node);
    }

    public void outADmultPower(ADmultPower node)
    {
        defaultOut(node);
    }

    public void caseADmultPower(ADmultPower node)
    {
        inADmultPower(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        if(node.getDmult() != null)
        {
            node.getDmult().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outADmultPower(node);
    }

    public void inAPowerMultiplication(APowerMultiplication node)
    {
        defaultIn(node);
    }

    public void outAPowerMultiplication(APowerMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAPowerMultiplication(APowerMultiplication node)
    {
        inAPowerMultiplication(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAPowerMultiplication(node);
    }

    public void inAMultMultiplication(AMultMultiplication node)
    {
        defaultIn(node);
    }

    public void outAMultMultiplication(AMultMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAMultMultiplication(AMultMultiplication node)
    {
        inAMultMultiplication(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAMultMultiplication(node);
    }

    public void inADivMultiplication(ADivMultiplication node)
    {
        defaultIn(node);
    }

    public void outADivMultiplication(ADivMultiplication node)
    {
        defaultOut(node);
    }

    public void caseADivMultiplication(ADivMultiplication node)
    {
        inADivMultiplication(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outADivMultiplication(node);
    }

    public void inAPercentMultiplication(APercentMultiplication node)
    {
        defaultIn(node);
    }

    public void outAPercentMultiplication(APercentMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAPercentMultiplication(APercentMultiplication node)
    {
        inAPercentMultiplication(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAPercentMultiplication(node);
    }

    public void inAMultiplicationAdditionSubition(AMultiplicationAdditionSubition node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationAdditionSubition(AMultiplicationAdditionSubition node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationAdditionSubition(AMultiplicationAdditionSubition node)
    {
        inAMultiplicationAdditionSubition(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAMultiplicationAdditionSubition(node);
    }

    public void inAAddAdditionSubition(AAddAdditionSubition node)
    {
        defaultIn(node);
    }

    public void outAAddAdditionSubition(AAddAdditionSubition node)
    {
        defaultOut(node);
    }

    public void caseAAddAdditionSubition(AAddAdditionSubition node)
    {
        inAAddAdditionSubition(node);
        if(node.getAdditionSubition() != null)
        {
            node.getAdditionSubition().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAAddAdditionSubition(node);
    }

    public void inASubAdditionSubition(ASubAdditionSubition node)
    {
        defaultIn(node);
    }

    public void outASubAdditionSubition(ASubAdditionSubition node)
    {
        defaultOut(node);
    }

    public void caseASubAdditionSubition(ASubAdditionSubition node)
    {
        inASubAdditionSubition(node);
        if(node.getAdditionSubition() != null)
        {
            node.getAdditionSubition().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outASubAdditionSubition(node);
    }

    public void inAFunCallValue(AFunCallValue node)
    {
        defaultIn(node);
    }

    public void outAFunCallValue(AFunCallValue node)
    {
        defaultOut(node);
    }

    public void caseAFunCallValue(AFunCallValue node)
    {
        inAFunCallValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunCallValue(node);
    }

    public void inANumberValue(ANumberValue node)
    {
        defaultIn(node);
    }

    public void outANumberValue(ANumberValue node)
    {
        defaultOut(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        inANumberValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberValue(node);
    }

    public void inAStrValue(AStrValue node)
    {
        defaultIn(node);
    }

    public void outAStrValue(AStrValue node)
    {
        defaultOut(node);
    }

    public void caseAStrValue(AStrValue node)
    {
        inAStrValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStrValue(node);
    }

    public void inANoneValue(ANoneValue node)
    {
        defaultIn(node);
    }

    public void outANoneValue(ANoneValue node)
    {
        defaultOut(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        inANoneValue(node);
        if(node.getNone() != null)
        {
            node.getNone().apply(this);
        }
        outANoneValue(node);
    }

    public void inAFunctionGroupFuncStat(AFunctionGroupFuncStat node)
    {
        defaultIn(node);
    }

    public void outAFunctionGroupFuncStat(AFunctionGroupFuncStat node)
    {
        defaultOut(node);
    }

    public void caseAFunctionGroupFuncStat(AFunctionGroupFuncStat node)
    {
        inAFunctionGroupFuncStat(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionGroupFuncStat(node);
    }

    public void inAStatementGroupFuncStat(AStatementGroupFuncStat node)
    {
        defaultIn(node);
    }

    public void outAStatementGroupFuncStat(AStatementGroupFuncStat node)
    {
        defaultOut(node);
    }

    public void caseAStatementGroupFuncStat(AStatementGroupFuncStat node)
    {
        inAStatementGroupFuncStat(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementGroupFuncStat(node);
    }

    public void inAGroupCommaIdEqVal(AGroupCommaIdEqVal node)
    {
        defaultIn(node);
    }

    public void outAGroupCommaIdEqVal(AGroupCommaIdEqVal node)
    {
        defaultOut(node);
    }

    public void caseAGroupCommaIdEqVal(AGroupCommaIdEqVal node)
    {
        inAGroupCommaIdEqVal(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getGroupEqVal() != null)
        {
            node.getGroupEqVal().apply(this);
        }
        outAGroupCommaIdEqVal(node);
    }

    public void inAGroupEqVal(AGroupEqVal node)
    {
        defaultIn(node);
    }

    public void outAGroupEqVal(AGroupEqVal node)
    {
        defaultOut(node);
    }

    public void caseAGroupEqVal(AGroupEqVal node)
    {
        inAGroupEqVal(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAGroupEqVal(node);
    }

    public void inAGroupCommaId(AGroupCommaId node)
    {
        defaultIn(node);
    }

    public void outAGroupCommaId(AGroupCommaId node)
    {
        defaultOut(node);
    }

    public void caseAGroupCommaId(AGroupCommaId node)
    {
        inAGroupCommaId(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getGroupAsId() != null)
        {
            node.getGroupAsId().apply(this);
        }
        outAGroupCommaId(node);
    }

    public void inAGroupMod(AGroupMod node)
    {
        defaultIn(node);
    }

    public void outAGroupMod(AGroupMod node)
    {
        defaultOut(node);
    }

    public void caseAGroupMod(AGroupMod node)
    {
        inAGroupMod(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        if(node.getGroupAsId() != null)
        {
            node.getGroupAsId().apply(this);
        }
        outAGroupMod(node);
    }

    public void inAGroupIdDot(AGroupIdDot node)
    {
        defaultIn(node);
    }

    public void outAGroupIdDot(AGroupIdDot node)
    {
        defaultOut(node);
    }

    public void caseAGroupIdDot(AGroupIdDot node)
    {
        inAGroupIdDot(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAGroupIdDot(node);
    }

    public void inAGroupCommaVal(AGroupCommaVal node)
    {
        defaultIn(node);
    }

    public void outAGroupCommaVal(AGroupCommaVal node)
    {
        defaultOut(node);
    }

    public void caseAGroupCommaVal(AGroupCommaVal node)
    {
        inAGroupCommaVal(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAGroupCommaVal(node);
    }

    public void inAGroupCommaExpr(AGroupCommaExpr node)
    {
        defaultIn(node);
    }

    public void outAGroupCommaExpr(AGroupCommaExpr node)
    {
        defaultOut(node);
    }

    public void caseAGroupCommaExpr(AGroupCommaExpr node)
    {
        inAGroupCommaExpr(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAGroupCommaExpr(node);
    }

    public void inAGroupAsId(AGroupAsId node)
    {
        defaultIn(node);
    }

    public void outAGroupAsId(AGroupAsId node)
    {
        defaultOut(node);
    }

    public void caseAGroupAsId(AGroupAsId node)
    {
        inAGroupAsId(node);
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAGroupAsId(node);
    }

    public void inAEqualCompEqs(AEqualCompEqs node)
    {
        defaultIn(node);
    }

    public void outAEqualCompEqs(AEqualCompEqs node)
    {
        defaultOut(node);
    }

    public void caseAEqualCompEqs(AEqualCompEqs node)
    {
        inAEqualCompEqs(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqualCompEqs(node);
    }

    public void inAMinusEqualCompEqs(AMinusEqualCompEqs node)
    {
        defaultIn(node);
    }

    public void outAMinusEqualCompEqs(AMinusEqualCompEqs node)
    {
        defaultOut(node);
    }

    public void caseAMinusEqualCompEqs(AMinusEqualCompEqs node)
    {
        inAMinusEqualCompEqs(node);
        if(node.getMinusEq() != null)
        {
            node.getMinusEq().apply(this);
        }
        outAMinusEqualCompEqs(node);
    }

    public void inADivEqualCompEqs(ADivEqualCompEqs node)
    {
        defaultIn(node);
    }

    public void outADivEqualCompEqs(ADivEqualCompEqs node)
    {
        defaultOut(node);
    }

    public void caseADivEqualCompEqs(ADivEqualCompEqs node)
    {
        inADivEqualCompEqs(node);
        if(node.getDivEq() != null)
        {
            node.getDivEq().apply(this);
        }
        outADivEqualCompEqs(node);
    }

    public void inALessCompTypes(ALessCompTypes node)
    {
        defaultIn(node);
    }

    public void outALessCompTypes(ALessCompTypes node)
    {
        defaultOut(node);
    }

    public void caseALessCompTypes(ALessCompTypes node)
    {
        inALessCompTypes(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outALessCompTypes(node);
    }

    public void inAGreatCompTypes(AGreatCompTypes node)
    {
        defaultIn(node);
    }

    public void outAGreatCompTypes(AGreatCompTypes node)
    {
        defaultOut(node);
    }

    public void caseAGreatCompTypes(AGreatCompTypes node)
    {
        inAGreatCompTypes(node);
        if(node.getGreat() != null)
        {
            node.getGreat().apply(this);
        }
        outAGreatCompTypes(node);
    }

    public void inAGreatEqualCompTypes(AGreatEqualCompTypes node)
    {
        defaultIn(node);
    }

    public void outAGreatEqualCompTypes(AGreatEqualCompTypes node)
    {
        defaultOut(node);
    }

    public void caseAGreatEqualCompTypes(AGreatEqualCompTypes node)
    {
        inAGreatEqualCompTypes(node);
        if(node.getGreatEq() != null)
        {
            node.getGreatEq().apply(this);
        }
        outAGreatEqualCompTypes(node);
    }

    public void inALessEqualCompTypes(ALessEqualCompTypes node)
    {
        defaultIn(node);
    }

    public void outALessEqualCompTypes(ALessEqualCompTypes node)
    {
        defaultOut(node);
    }

    public void caseALessEqualCompTypes(ALessEqualCompTypes node)
    {
        inALessEqualCompTypes(node);
        if(node.getLessEq() != null)
        {
            node.getLessEq().apply(this);
        }
        outALessEqualCompTypes(node);
    }

    public void inANotEqualCompTypes(ANotEqualCompTypes node)
    {
        defaultIn(node);
    }

    public void outANotEqualCompTypes(ANotEqualCompTypes node)
    {
        defaultOut(node);
    }

    public void caseANotEqualCompTypes(ANotEqualCompTypes node)
    {
        inANotEqualCompTypes(node);
        if(node.getNotEq() != null)
        {
            node.getNotEq().apply(this);
        }
        outANotEqualCompTypes(node);
    }

    public void inAEqualCompTypes(AEqualCompTypes node)
    {
        defaultIn(node);
    }

    public void outAEqualCompTypes(AEqualCompTypes node)
    {
        defaultOut(node);
    }

    public void caseAEqualCompTypes(AEqualCompTypes node)
    {
        inAEqualCompTypes(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualCompTypes(node);
    }

    public void inAMaxMaxMin(AMaxMaxMin node)
    {
        defaultIn(node);
    }

    public void outAMaxMaxMin(AMaxMaxMin node)
    {
        defaultOut(node);
    }

    public void caseAMaxMaxMin(AMaxMaxMin node)
    {
        inAMaxMaxMin(node);
        if(node.getMax() != null)
        {
            node.getMax().apply(this);
        }
        outAMaxMaxMin(node);
    }

    public void inAMinMaxMin(AMinMaxMin node)
    {
        defaultIn(node);
    }

    public void outAMinMaxMin(AMinMaxMin node)
    {
        defaultOut(node);
    }

    public void caseAMinMaxMin(AMinMaxMin node)
    {
        inAMinMaxMin(node);
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        outAMinMaxMin(node);
    }

    public void inAPlusMathTypes(APlusMathTypes node)
    {
        defaultIn(node);
    }

    public void outAPlusMathTypes(APlusMathTypes node)
    {
        defaultOut(node);
    }

    public void caseAPlusMathTypes(APlusMathTypes node)
    {
        inAPlusMathTypes(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusMathTypes(node);
    }

    public void inAMinusMathTypes(AMinusMathTypes node)
    {
        defaultIn(node);
    }

    public void outAMinusMathTypes(AMinusMathTypes node)
    {
        defaultOut(node);
    }

    public void caseAMinusMathTypes(AMinusMathTypes node)
    {
        inAMinusMathTypes(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusMathTypes(node);
    }

    public void inAMultMathTypes(AMultMathTypes node)
    {
        defaultIn(node);
    }

    public void outAMultMathTypes(AMultMathTypes node)
    {
        defaultOut(node);
    }

    public void caseAMultMathTypes(AMultMathTypes node)
    {
        inAMultMathTypes(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultMathTypes(node);
    }

    public void inADivMathTypes(ADivMathTypes node)
    {
        defaultIn(node);
    }

    public void outADivMathTypes(ADivMathTypes node)
    {
        defaultOut(node);
    }

    public void caseADivMathTypes(ADivMathTypes node)
    {
        inADivMathTypes(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivMathTypes(node);
    }

    public void inAModMathTypes(AModMathTypes node)
    {
        defaultIn(node);
    }

    public void outAModMathTypes(AModMathTypes node)
    {
        defaultOut(node);
    }

    public void caseAModMathTypes(AModMathTypes node)
    {
        inAModMathTypes(node);
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        outAModMathTypes(node);
    }

    public void inAPowMathTypes(APowMathTypes node)
    {
        defaultIn(node);
    }

    public void outAPowMathTypes(APowMathTypes node)
    {
        defaultOut(node);
    }

    public void caseAPowMathTypes(APowMathTypes node)
    {
        inAPowMathTypes(node);
        if(node.getDmult() != null)
        {
            node.getDmult().apply(this);
        }
        outAPowMathTypes(node);
    }

    public void inABooleanNotComp(ABooleanNotComp node)
    {
        defaultIn(node);
    }

    public void outABooleanNotComp(ABooleanNotComp node)
    {
        defaultOut(node);
    }

    public void caseABooleanNotComp(ABooleanNotComp node)
    {
        inABooleanNotComp(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outABooleanNotComp(node);
    }

    public void inANotNotComp(ANotNotComp node)
    {
        defaultIn(node);
    }

    public void outANotNotComp(ANotNotComp node)
    {
        defaultOut(node);
    }

    public void caseANotNotComp(ANotNotComp node)
    {
        inANotNotComp(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANotNotComp(node);
    }

    public void inANotFromAndAndComp(ANotFromAndAndComp node)
    {
        defaultIn(node);
    }

    public void outANotFromAndAndComp(ANotFromAndAndComp node)
    {
        defaultOut(node);
    }

    public void caseANotFromAndAndComp(ANotFromAndAndComp node)
    {
        inANotFromAndAndComp(node);
        if(node.getNotComp() != null)
        {
            node.getNotComp().apply(this);
        }
        outANotFromAndAndComp(node);
    }

    public void inAAndAndComp(AAndAndComp node)
    {
        defaultIn(node);
    }

    public void outAAndAndComp(AAndAndComp node)
    {
        defaultOut(node);
    }

    public void caseAAndAndComp(AAndAndComp node)
    {
        inAAndAndComp(node);
        if(node.getAndComp() != null)
        {
            node.getAndComp().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getNotComp() != null)
        {
            node.getNotComp().apply(this);
        }
        outAAndAndComp(node);
    }

    public void inAAndFromOrOrComp(AAndFromOrOrComp node)
    {
        defaultIn(node);
    }

    public void outAAndFromOrOrComp(AAndFromOrOrComp node)
    {
        defaultOut(node);
    }

    public void caseAAndFromOrOrComp(AAndFromOrOrComp node)
    {
        inAAndFromOrOrComp(node);
        if(node.getAndComp() != null)
        {
            node.getAndComp().apply(this);
        }
        outAAndFromOrOrComp(node);
    }

    public void inAOrOrComp(AOrOrComp node)
    {
        defaultIn(node);
    }

    public void outAOrOrComp(AOrOrComp node)
    {
        defaultOut(node);
    }

    public void caseAOrOrComp(AOrOrComp node)
    {
        inAOrOrComp(node);
        if(node.getOrComp() != null)
        {
            node.getOrComp().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getAndComp() != null)
        {
            node.getAndComp().apply(this);
        }
        outAOrOrComp(node);
    }
}
