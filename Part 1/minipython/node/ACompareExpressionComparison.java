/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ACompareExpressionComparison extends PComparison
{
    private PExpression _expression1_;
    private PCompTypes _compTypes_;
    private PExpression _expression2_;

    public ACompareExpressionComparison()
    {
    }

    public ACompareExpressionComparison(
        PExpression _expression1_,
        PCompTypes _compTypes_,
        PExpression _expression2_)
    {
        setExpression1(_expression1_);

        setCompTypes(_compTypes_);

        setExpression2(_expression2_);

    }
    public Object clone()
    {
        return new ACompareExpressionComparison(
            (PExpression) cloneNode(_expression1_),
            (PCompTypes) cloneNode(_compTypes_),
            (PExpression) cloneNode(_expression2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompareExpressionComparison(this);
    }

    public PExpression getExpression1()
    {
        return _expression1_;
    }

    public void setExpression1(PExpression node)
    {
        if(_expression1_ != null)
        {
            _expression1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression1_ = node;
    }

    public PCompTypes getCompTypes()
    {
        return _compTypes_;
    }

    public void setCompTypes(PCompTypes node)
    {
        if(_compTypes_ != null)
        {
            _compTypes_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _compTypes_ = node;
    }

    public PExpression getExpression2()
    {
        return _expression2_;
    }

    public void setExpression2(PExpression node)
    {
        if(_expression2_ != null)
        {
            _expression2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression2_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expression1_)
            + toString(_compTypes_)
            + toString(_expression2_);
    }

    void removeChild(Node child)
    {
        if(_expression1_ == child)
        {
            _expression1_ = null;
            return;
        }

        if(_compTypes_ == child)
        {
            _compTypes_ = null;
            return;
        }

        if(_expression2_ == child)
        {
            _expression2_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expression1_ == oldChild)
        {
            setExpression1((PExpression) newChild);
            return;
        }

        if(_compTypes_ == oldChild)
        {
            setCompTypes((PCompTypes) newChild);
            return;
        }

        if(_expression2_ == oldChild)
        {
            setExpression2((PExpression) newChild);
            return;
        }

    }
}
