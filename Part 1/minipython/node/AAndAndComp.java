/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAndAndComp extends PAndComp
{
    private PAndComp _andComp_;
    private TAnd _and_;
    private PNotComp _notComp_;

    public AAndAndComp()
    {
    }

    public AAndAndComp(
        PAndComp _andComp_,
        TAnd _and_,
        PNotComp _notComp_)
    {
        setAndComp(_andComp_);

        setAnd(_and_);

        setNotComp(_notComp_);

    }
    public Object clone()
    {
        return new AAndAndComp(
            (PAndComp) cloneNode(_andComp_),
            (TAnd) cloneNode(_and_),
            (PNotComp) cloneNode(_notComp_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndAndComp(this);
    }

    public PAndComp getAndComp()
    {
        return _andComp_;
    }

    public void setAndComp(PAndComp node)
    {
        if(_andComp_ != null)
        {
            _andComp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _andComp_ = node;
    }

    public TAnd getAnd()
    {
        return _and_;
    }

    public void setAnd(TAnd node)
    {
        if(_and_ != null)
        {
            _and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _and_ = node;
    }

    public PNotComp getNotComp()
    {
        return _notComp_;
    }

    public void setNotComp(PNotComp node)
    {
        if(_notComp_ != null)
        {
            _notComp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _notComp_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_andComp_)
            + toString(_and_)
            + toString(_notComp_);
    }

    void removeChild(Node child)
    {
        if(_andComp_ == child)
        {
            _andComp_ = null;
            return;
        }

        if(_and_ == child)
        {
            _and_ = null;
            return;
        }

        if(_notComp_ == child)
        {
            _notComp_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_andComp_ == oldChild)
        {
            setAndComp((PAndComp) newChild);
            return;
        }

        if(_and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(_notComp_ == oldChild)
        {
            setNotComp((PNotComp) newChild);
            return;
        }

    }
}
