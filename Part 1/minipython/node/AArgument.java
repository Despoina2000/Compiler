/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArgument extends PArgument
{
    private TId _id_;
    private PGroupEqVal _groupEqVal_;
    private final LinkedList _groupCommaIdEqVal_ = new TypedLinkedList(new GroupCommaIdEqVal_Cast());

    public AArgument()
    {
    }

    public AArgument(
        TId _id_,
        PGroupEqVal _groupEqVal_,
        List _groupCommaIdEqVal_)
    {
        setId(_id_);

        setGroupEqVal(_groupEqVal_);

        {
            this._groupCommaIdEqVal_.clear();
            this._groupCommaIdEqVal_.addAll(_groupCommaIdEqVal_);
        }

    }
    public Object clone()
    {
        return new AArgument(
            (TId) cloneNode(_id_),
            (PGroupEqVal) cloneNode(_groupEqVal_),
            cloneList(_groupCommaIdEqVal_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgument(this);
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public PGroupEqVal getGroupEqVal()
    {
        return _groupEqVal_;
    }

    public void setGroupEqVal(PGroupEqVal node)
    {
        if(_groupEqVal_ != null)
        {
            _groupEqVal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _groupEqVal_ = node;
    }

    public LinkedList getGroupCommaIdEqVal()
    {
        return _groupCommaIdEqVal_;
    }

    public void setGroupCommaIdEqVal(List list)
    {
        _groupCommaIdEqVal_.clear();
        _groupCommaIdEqVal_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_id_)
            + toString(_groupEqVal_)
            + toString(_groupCommaIdEqVal_);
    }

    void removeChild(Node child)
    {
        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_groupEqVal_ == child)
        {
            _groupEqVal_ = null;
            return;
        }

        if(_groupCommaIdEqVal_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(_groupEqVal_ == oldChild)
        {
            setGroupEqVal((PGroupEqVal) newChild);
            return;
        }

        for(ListIterator i = _groupCommaIdEqVal_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class GroupCommaIdEqVal_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PGroupCommaIdEqVal node = (PGroupCommaIdEqVal) o;

            if((node.parent() != null) &&
                (node.parent() != AArgument.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AArgument.this))
            {
                node.parent(AArgument.this);
            }

            return node;
        }
    }
}
