/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArrayStatement extends PStatement
{
    private final LinkedList _tab_ = new TypedLinkedList(new Tab_Cast());
    private TId _id_;
    private TLBr _lBr_;
    private PExpression _expression1_;
    private TRBr _rBr_;
    private TEq _eq_;
    private PExpression _expression2_;

    public AArrayStatement()
    {
    }

    public AArrayStatement(
        List _tab_,
        TId _id_,
        TLBr _lBr_,
        PExpression _expression1_,
        TRBr _rBr_,
        TEq _eq_,
        PExpression _expression2_)
    {
        {
            this._tab_.clear();
            this._tab_.addAll(_tab_);
        }

        setId(_id_);

        setLBr(_lBr_);

        setExpression1(_expression1_);

        setRBr(_rBr_);

        setEq(_eq_);

        setExpression2(_expression2_);

    }
    public Object clone()
    {
        return new AArrayStatement(
            cloneList(_tab_),
            (TId) cloneNode(_id_),
            (TLBr) cloneNode(_lBr_),
            (PExpression) cloneNode(_expression1_),
            (TRBr) cloneNode(_rBr_),
            (TEq) cloneNode(_eq_),
            (PExpression) cloneNode(_expression2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayStatement(this);
    }

    public LinkedList getTab()
    {
        return _tab_;
    }

    public void setTab(List list)
    {
        _tab_.clear();
        _tab_.addAll(list);
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public TLBr getLBr()
    {
        return _lBr_;
    }

    public void setLBr(TLBr node)
    {
        if(_lBr_ != null)
        {
            _lBr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBr_ = node;
    }

    public PExpression getExpression1()
    {
        return _expression1_;
    }

    public void setExpression1(PExpression node)
    {
        if(_expression1_ != null)
        {
            _expression1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression1_ = node;
    }

    public TRBr getRBr()
    {
        return _rBr_;
    }

    public void setRBr(TRBr node)
    {
        if(_rBr_ != null)
        {
            _rBr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBr_ = node;
    }

    public TEq getEq()
    {
        return _eq_;
    }

    public void setEq(TEq node)
    {
        if(_eq_ != null)
        {
            _eq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _eq_ = node;
    }

    public PExpression getExpression2()
    {
        return _expression2_;
    }

    public void setExpression2(PExpression node)
    {
        if(_expression2_ != null)
        {
            _expression2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression2_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_tab_)
            + toString(_id_)
            + toString(_lBr_)
            + toString(_expression1_)
            + toString(_rBr_)
            + toString(_eq_)
            + toString(_expression2_);
    }

    void removeChild(Node child)
    {
        if(_tab_.remove(child))
        {
            return;
        }

        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_lBr_ == child)
        {
            _lBr_ = null;
            return;
        }

        if(_expression1_ == child)
        {
            _expression1_ = null;
            return;
        }

        if(_rBr_ == child)
        {
            _rBr_ = null;
            return;
        }

        if(_eq_ == child)
        {
            _eq_ = null;
            return;
        }

        if(_expression2_ == child)
        {
            _expression2_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _tab_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(_lBr_ == oldChild)
        {
            setLBr((TLBr) newChild);
            return;
        }

        if(_expression1_ == oldChild)
        {
            setExpression1((PExpression) newChild);
            return;
        }

        if(_rBr_ == oldChild)
        {
            setRBr((TRBr) newChild);
            return;
        }

        if(_eq_ == oldChild)
        {
            setEq((TEq) newChild);
            return;
        }

        if(_expression2_ == oldChild)
        {
            setExpression2((PExpression) newChild);
            return;
        }

    }

    private class Tab_Cast implements Cast
    {
        public Object cast(Object o)
        {
            TTab node = (TTab) o;

            if((node.parent() != null) &&
                (node.parent() != AArrayStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AArrayStatement.this))
            {
                node.parent(AArrayStatement.this);
            }

            return node;
        }
    }
}
