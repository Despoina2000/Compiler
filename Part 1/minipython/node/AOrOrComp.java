/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AOrOrComp extends POrComp
{
    private POrComp _orComp_;
    private TOr _or_;
    private PAndComp _andComp_;

    public AOrOrComp()
    {
    }

    public AOrOrComp(
        POrComp _orComp_,
        TOr _or_,
        PAndComp _andComp_)
    {
        setOrComp(_orComp_);

        setOr(_or_);

        setAndComp(_andComp_);

    }
    public Object clone()
    {
        return new AOrOrComp(
            (POrComp) cloneNode(_orComp_),
            (TOr) cloneNode(_or_),
            (PAndComp) cloneNode(_andComp_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrOrComp(this);
    }

    public POrComp getOrComp()
    {
        return _orComp_;
    }

    public void setOrComp(POrComp node)
    {
        if(_orComp_ != null)
        {
            _orComp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _orComp_ = node;
    }

    public TOr getOr()
    {
        return _or_;
    }

    public void setOr(TOr node)
    {
        if(_or_ != null)
        {
            _or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _or_ = node;
    }

    public PAndComp getAndComp()
    {
        return _andComp_;
    }

    public void setAndComp(PAndComp node)
    {
        if(_andComp_ != null)
        {
            _andComp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _andComp_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_orComp_)
            + toString(_or_)
            + toString(_andComp_);
    }

    void removeChild(Node child)
    {
        if(_orComp_ == child)
        {
            _orComp_ = null;
            return;
        }

        if(_or_ == child)
        {
            _or_ = null;
            return;
        }

        if(_andComp_ == child)
        {
            _andComp_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_orComp_ == oldChild)
        {
            setOrComp((POrComp) newChild);
            return;
        }

        if(_or_ == oldChild)
        {
            setOr((TOr) newChild);
            return;
        }

        if(_andComp_ == oldChild)
        {
            setAndComp((PAndComp) newChild);
            return;
        }

    }
}
