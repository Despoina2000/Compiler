/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ADmultPower extends PPower
{
    private PPower _power_;
    private TDmult _dmult_;
    private PValue _value_;

    public ADmultPower()
    {
    }

    public ADmultPower(
        PPower _power_,
        TDmult _dmult_,
        PValue _value_)
    {
        setPower(_power_);

        setDmult(_dmult_);

        setValue(_value_);

    }
    public Object clone()
    {
        return new ADmultPower(
            (PPower) cloneNode(_power_),
            (TDmult) cloneNode(_dmult_),
            (PValue) cloneNode(_value_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADmultPower(this);
    }

    public PPower getPower()
    {
        return _power_;
    }

    public void setPower(PPower node)
    {
        if(_power_ != null)
        {
            _power_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _power_ = node;
    }

    public TDmult getDmult()
    {
        return _dmult_;
    }

    public void setDmult(TDmult node)
    {
        if(_dmult_ != null)
        {
            _dmult_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _dmult_ = node;
    }

    public PValue getValue()
    {
        return _value_;
    }

    public void setValue(PValue node)
    {
        if(_value_ != null)
        {
            _value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _value_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_power_)
            + toString(_dmult_)
            + toString(_value_);
    }

    void removeChild(Node child)
    {
        if(_power_ == child)
        {
            _power_ = null;
            return;
        }

        if(_dmult_ == child)
        {
            _dmult_ = null;
            return;
        }

        if(_value_ == child)
        {
            _value_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_power_ == oldChild)
        {
            setPower((PPower) newChild);
            return;
        }

        if(_dmult_ == oldChild)
        {
            setDmult((TDmult) newChild);
            return;
        }

        if(_value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

    }
}
