/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.parser;

import minipython.lexer.*;
import minipython.node.*;
import minipython.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {

                    case 0:
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;


                    case 1:
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;


                    case 2:
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;


                    case 3:
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;


                    case 4:
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;


                    case 5:
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;


                    case 6:
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;


                    case 7:
		    {
			ArrayList list = new7();
			push(goTo(2), list);
		    }
		    break;


                    case 8:
		    {
			ArrayList list = new8();
			push(goTo(3), list);
		    }
		    break;


                    case 9:
		    {
			ArrayList list = new9();
			push(goTo(3), list);
		    }
		    break;


                    case 10:
		    {
			ArrayList list = new10();
			push(goTo(3), list);
		    }
		    break;


                    case 11:
		    {
			ArrayList list = new11();
			push(goTo(3), list);
		    }
		    break;


                    case 12:
		    {
			ArrayList list = new12();
			push(goTo(3), list);
		    }
		    break;


                    case 13:
		    {
			ArrayList list = new13();
			push(goTo(3), list);
		    }
		    break;


                    case 14:
		    {
			ArrayList list = new14();
			push(goTo(3), list);
		    }
		    break;


                    case 15:
		    {
			ArrayList list = new15();
			push(goTo(3), list);
		    }
		    break;


                    case 16:
		    {
			ArrayList list = new16();
			push(goTo(3), list);
		    }
		    break;


                    case 17:
		    {
			ArrayList list = new17();
			push(goTo(3), list);
		    }
		    break;


                    case 18:
		    {
			ArrayList list = new18();
			push(goTo(3), list);
		    }
		    break;


                    case 19:
		    {
			ArrayList list = new19();
			push(goTo(3), list);
		    }
		    break;


                    case 20:
		    {
			ArrayList list = new20();
			push(goTo(3), list);
		    }
		    break;


                    case 21:
		    {
			ArrayList list = new21();
			push(goTo(3), list);
		    }
		    break;


                    case 22:
		    {
			ArrayList list = new22();
			push(goTo(3), list);
		    }
		    break;


                    case 23:
		    {
			ArrayList list = new23();
			push(goTo(3), list);
		    }
		    break;


                    case 24:
		    {
			ArrayList list = new24();
			push(goTo(3), list);
		    }
		    break;


                    case 25:
		    {
			ArrayList list = new25();
			push(goTo(3), list);
		    }
		    break;


                    case 26:
		    {
			ArrayList list = new26();
			push(goTo(3), list);
		    }
		    break;


                    case 27:
		    {
			ArrayList list = new27();
			push(goTo(3), list);
		    }
		    break;


                    case 28:
		    {
			ArrayList list = new28();
			push(goTo(3), list);
		    }
		    break;


                    case 29:
		    {
			ArrayList list = new29();
			push(goTo(3), list);
		    }
		    break;


                    case 30:
		    {
			ArrayList list = new30();
			push(goTo(4), list);
		    }
		    break;


                    case 31:
		    {
			ArrayList list = new31();
			push(goTo(4), list);
		    }
		    break;


                    case 32:
		    {
			ArrayList list = new32();
			push(goTo(4), list);
		    }
		    break;


                    case 33:
		    {
			ArrayList list = new33();
			push(goTo(4), list);
		    }
		    break;


                    case 34:
		    {
			ArrayList list = new34();
			push(goTo(4), list);
		    }
		    break;


                    case 35:
		    {
			ArrayList list = new35();
			push(goTo(4), list);
		    }
		    break;


                    case 36:
		    {
			ArrayList list = new36();
			push(goTo(4), list);
		    }
		    break;


                    case 37:
		    {
			ArrayList list = new37();
			push(goTo(4), list);
		    }
		    break;


                    case 38:
		    {
			ArrayList list = new38();
			push(goTo(4), list);
		    }
		    break;


                    case 39:
		    {
			ArrayList list = new39();
			push(goTo(5), list);
		    }
		    break;


                    case 40:
		    {
			ArrayList list = new40();
			push(goTo(5), list);
		    }
		    break;


                    case 41:
		    {
			ArrayList list = new41();
			push(goTo(5), list);
		    }
		    break;


                    case 42:
		    {
			ArrayList list = new42();
			push(goTo(5), list);
		    }
		    break;


                    case 43:
		    {
			ArrayList list = new43();
			push(goTo(5), list);
		    }
		    break;


                    case 44:
		    {
			ArrayList list = new44();
			push(goTo(5), list);
		    }
		    break;


                    case 45:
		    {
			ArrayList list = new45();
			push(goTo(5), list);
		    }
		    break;


                    case 46:
		    {
			ArrayList list = new46();
			push(goTo(5), list);
		    }
		    break;


                    case 47:
		    {
			ArrayList list = new47();
			push(goTo(6), list);
		    }
		    break;


                    case 48:
		    {
			ArrayList list = new48();
			push(goTo(6), list);
		    }
		    break;


                    case 49:
		    {
			ArrayList list = new49();
			push(goTo(7), list);
		    }
		    break;


                    case 50:
		    {
			ArrayList list = new50();
			push(goTo(7), list);
		    }
		    break;


                    case 51:
		    {
			ArrayList list = new51();
			push(goTo(7), list);
		    }
		    break;


                    case 52:
		    {
			ArrayList list = new52();
			push(goTo(8), list);
		    }
		    break;


                    case 53:
		    {
			ArrayList list = new53();
			push(goTo(8), list);
		    }
		    break;


                    case 54:
		    {
			ArrayList list = new54();
			push(goTo(9), list);
		    }
		    break;


                    case 55:
		    {
			ArrayList list = new55();
			push(goTo(9), list);
		    }
		    break;


                    case 56:
		    {
			ArrayList list = new56();
			push(goTo(10), list);
		    }
		    break;


                    case 57:
		    {
			ArrayList list = new57();
			push(goTo(10), list);
		    }
		    break;


                    case 58:
		    {
			ArrayList list = new58();
			push(goTo(11), list);
		    }
		    break;


                    case 59:
		    {
			ArrayList list = new59();
			push(goTo(11), list);
		    }
		    break;


                    case 60:
		    {
			ArrayList list = new60();
			push(goTo(11), list);
		    }
		    break;


                    case 61:
		    {
			ArrayList list = new61();
			push(goTo(11), list);
		    }
		    break;


                    case 62:
		    {
			ArrayList list = new62();
			push(goTo(12), list);
		    }
		    break;


                    case 63:
		    {
			ArrayList list = new63();
			push(goTo(12), list);
		    }
		    break;


                    case 64:
		    {
			ArrayList list = new64();
			push(goTo(12), list);
		    }
		    break;


                    case 65:
		    {
			ArrayList list = new65();
			push(goTo(13), list);
		    }
		    break;


                    case 66:
		    {
			ArrayList list = new66();
			push(goTo(13), list);
		    }
		    break;


                    case 67:
		    {
			ArrayList list = new67();
			push(goTo(13), list);
		    }
		    break;


                    case 68:
		    {
			ArrayList list = new68();
			push(goTo(13), list);
		    }
		    break;


                    case 69:
		    {
			ArrayList list = new69();
			push(goTo(14), list);
		    }
		    break;


                    case 70:
		    {
			ArrayList list = new70();
			push(goTo(14), list);
		    }
		    break;


                    case 71:
		    {
			ArrayList list = new71();
			push(goTo(15), list);
		    }
		    break;


                    case 72:
		    {
			ArrayList list = new72();
			push(goTo(15), list);
		    }
		    break;


                    case 73:
		    {
			ArrayList list = new73();
			push(goTo(16), list);
		    }
		    break;


                    case 74:
		    {
			ArrayList list = new74();
			push(goTo(17), list);
		    }
		    break;


                    case 75:
		    {
			ArrayList list = new75();
			push(goTo(17), list);
		    }
		    break;


                    case 76:
		    {
			ArrayList list = new76();
			push(goTo(18), list);
		    }
		    break;


                    case 77:
		    {
			ArrayList list = new77();
			push(goTo(18), list);
		    }
		    break;


                    case 78:
		    {
			ArrayList list = new78();
			push(goTo(19), list);
		    }
		    break;


                    case 79:
		    {
			ArrayList list = new79();
			push(goTo(20), list);
		    }
		    break;


                    case 80:
		    {
			ArrayList list = new80();
			push(goTo(21), list);
		    }
		    break;


                    case 81:
		    {
			ArrayList list = new81();
			push(goTo(22), list);
		    }
		    break;


                    case 82:
		    {
			ArrayList list = new82();
			push(goTo(23), list);
		    }
		    break;


                    case 83:
		    {
			ArrayList list = new83();
			push(goTo(23), list);
		    }
		    break;


                    case 84:
		    {
			ArrayList list = new84();
			push(goTo(23), list);
		    }
		    break;


                    case 85:
		    {
			ArrayList list = new85();
			push(goTo(24), list);
		    }
		    break;


                    case 86:
		    {
			ArrayList list = new86();
			push(goTo(24), list);
		    }
		    break;


                    case 87:
		    {
			ArrayList list = new87();
			push(goTo(24), list);
		    }
		    break;


                    case 88:
		    {
			ArrayList list = new88();
			push(goTo(24), list);
		    }
		    break;


                    case 89:
		    {
			ArrayList list = new89();
			push(goTo(24), list);
		    }
		    break;


                    case 90:
		    {
			ArrayList list = new90();
			push(goTo(24), list);
		    }
		    break;


                    case 91:
		    {
			ArrayList list = new91();
			push(goTo(25), list);
		    }
		    break;


                    case 92:
		    {
			ArrayList list = new92();
			push(goTo(25), list);
		    }
		    break;


                    case 93:
		    {
			ArrayList list = new93();
			push(goTo(26), list);
		    }
		    break;


                    case 94:
		    {
			ArrayList list = new94();
			push(goTo(26), list);
		    }
		    break;


                    case 95:
		    {
			ArrayList list = new95();
			push(goTo(26), list);
		    }
		    break;


                    case 96:
		    {
			ArrayList list = new96();
			push(goTo(26), list);
		    }
		    break;


                    case 97:
		    {
			ArrayList list = new97();
			push(goTo(26), list);
		    }
		    break;


                    case 98:
		    {
			ArrayList list = new98();
			push(goTo(26), list);
		    }
		    break;


                    case 99:
		    {
			ArrayList list = new99();
			push(goTo(27), list);
		    }
		    break;


                    case 100:
		    {
			ArrayList list = new100();
			push(goTo(27), list);
		    }
		    break;


                    case 101:
		    {
			ArrayList list = new101();
			push(goTo(28), list);
		    }
		    break;


                    case 102:
		    {
			ArrayList list = new102();
			push(goTo(28), list);
		    }
		    break;


                    case 103:
		    {
			ArrayList list = new103();
			push(goTo(29), list);
		    }
		    break;


                    case 104:
		    {
			ArrayList list = new104();
			push(goTo(29), list);
		    }
		    break;


                    case 105:
		    {
			ArrayList list = new105();
			push(goTo(30), list);
		    }
		    break;


                    case 106:
		    {
			ArrayList list = new106();
			push(goTo(30), list);
		    }
		    break;


                    case 107:
		    {
			ArrayList list = new107();
			push(goTo(31), list);
		    }
		    break;


                    case 108:
		    {
			ArrayList list = new108();
			push(goTo(31), list);
		    }
		    break;


                    case 109:
		    {
			ArrayList list = new109();
			push(goTo(32), list);
		    }
		    break;


                    case 110:
		    {
			ArrayList list = new110();
			push(goTo(32), list);
		    }
		    break;


                    case 111:
		    {
			ArrayList list = new111();
			push(goTo(33), list);
		    }
		    break;


                    case 112:
		    {
			ArrayList list = new112();
			push(goTo(33), list);
		    }
		    break;


                    case 113:
		    {
			ArrayList list = new113();
			push(goTo(34), list);
		    }
		    break;


                    case 114:
		    {
			ArrayList list = new114();
			push(goTo(34), list);
		    }
		    break;


                    case 115:
		    {
			ArrayList list = new115();
			push(goTo(35), list);
		    }
		    break;


                    case 116:
		    {
			ArrayList list = new116();
			push(goTo(35), list);
		    }
		    break;


                    case 117:
		    {
			ArrayList list = new117();
			push(goTo(36), list);
		    }
		    break;


                    case 118:
		    {
			ArrayList list = new118();
			push(goTo(36), list);
		    }
		    break;


                    case 119:
		    {
			ArrayList list = new119();
			push(goTo(37), list);
		    }
		    break;


                    case 120:
		    {
			ArrayList list = new120();
			push(goTo(37), list);
		    }
		    break;

                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGoal node1 = (PGoal) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList();

        PGoal pgoalNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        }

        pgoalNode1 = new AGoal(listNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal pgoalNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgoalNode1 = new AGoal(listNode3);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TDef tdefNode2;
        TId tidNode3;
        TLPar tlparNode4;
        Object nullNode5 = null;
        TRPar trparNode6;
        TSemi tsemiNode7;
        PStatement pstatementNode8;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tsemiNode7 = (TSemi)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(tdefNode2, tidNode3, tlparNode4, null, trparNode6, tsemiNode7, pstatementNode8);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TDef tdefNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PArgument pargumentNode5;
        TRPar trparNode6;
        TSemi tsemiNode7;
        PStatement pstatementNode8;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pargumentNode5 = (PArgument)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tsemiNode7 = (TSemi)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunction(tdefNode2, tidNode3, tlparNode4, pargumentNode5, trparNode6, tsemiNode7, pstatementNode8);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TId tidNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        }

        pargumentNode1 = new AArgument(tidNode2, null, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TId tidNode2;
        PGroupEqVal pgroupeqvalNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        pgroupeqvalNode3 = (PGroupEqVal)nodeArrayList2.get(0);
        {
        }

        pargumentNode1 = new AArgument(tidNode2, pgroupeqvalNode3, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TId tidNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgument(tidNode2, null, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TId tidNode2;
        PGroupEqVal pgroupeqvalNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        pgroupeqvalNode3 = (PGroupEqVal)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgument(tidNode2, pgroupeqvalNode3, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TIf tifNode3;
        POrComp porcompNode4;
        TSemi tsemiNode5;
        PStatement pstatementNode6;
        {
        }
        tifNode3 = (TIf)nodeArrayList1.get(0);
        porcompNode4 = (POrComp)nodeArrayList2.get(0);
        tsemiNode5 = (TSemi)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatement(listNode2, tifNode3, porcompNode4, tsemiNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TIf tifNode4;
        POrComp porcompNode5;
        TSemi tsemiNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tifNode4 = (TIf)nodeArrayList2.get(0);
        porcompNode5 = (POrComp)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(listNode3, tifNode4, porcompNode5, tsemiNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TWhile twhileNode3;
        POrComp porcompNode4;
        TSemi tsemiNode5;
        PStatement pstatementNode6;
        {
        }
        twhileNode3 = (TWhile)nodeArrayList1.get(0);
        porcompNode4 = (POrComp)nodeArrayList2.get(0);
        tsemiNode5 = (TSemi)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatement(listNode2, twhileNode3, porcompNode4, tsemiNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TWhile twhileNode4;
        POrComp porcompNode5;
        TSemi tsemiNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        twhileNode4 = (TWhile)nodeArrayList2.get(0);
        porcompNode5 = (POrComp)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(listNode3, twhileNode4, porcompNode5, tsemiNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TFor tforNode3;
        TId tidNode4;
        TIn tinNode5;
        TId tidNode6;
        TSemi tsemiNode7;
        PStatement pstatementNode8;
        {
        }
        tforNode3 = (TFor)nodeArrayList1.get(0);
        tidNode4 = (TId)nodeArrayList2.get(0);
        tinNode5 = (TIn)nodeArrayList3.get(0);
        tidNode6 = (TId)nodeArrayList4.get(0);
        tsemiNode7 = (TSemi)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AForStatement(listNode2, tforNode3, tidNode4, tinNode5, tidNode6, tsemiNode7, pstatementNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TFor tforNode4;
        TId tidNode5;
        TIn tinNode6;
        TId tidNode7;
        TSemi tsemiNode8;
        PStatement pstatementNode9;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tforNode4 = (TFor)nodeArrayList2.get(0);
        tidNode5 = (TId)nodeArrayList3.get(0);
        tinNode6 = (TIn)nodeArrayList4.get(0);
        tidNode7 = (TId)nodeArrayList5.get(0);
        tsemiNode8 = (TSemi)nodeArrayList6.get(0);
        pstatementNode9 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatement(listNode3, tforNode4, tidNode5, tinNode6, tidNode7, tsemiNode8, pstatementNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TReturn treturnNode3;
        PExpression pexpressionNode4;
        {
        }
        treturnNode3 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(listNode2, treturnNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TReturn treturnNode4;
        PExpression pexpressionNode5;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        treturnNode4 = (TReturn)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatement(listNode3, treturnNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(listNode2, tprintNode3, pexpressionNode4, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(listNode3, tprintNode4, pexpressionNode5, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new APrintStatement(listNode2, tprintNode3, pexpressionNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstatementNode1 = new APrintStatement(listNode3, tprintNode4, pexpressionNode5, listNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TId tidNode3;
        PCompEqs pcompeqsNode4;
        PExpression pexpressionNode5;
        {
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        pcompeqsNode4 = (PCompEqs)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssingStatement(listNode2, tidNode3, pcompeqsNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TId tidNode4;
        PCompEqs pcompeqsNode5;
        PExpression pexpressionNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        pcompeqsNode5 = (PCompEqs)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssingStatement(listNode3, tidNode4, pcompeqsNode5, pexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TId tidNode3;
        TLBr tlbrNode4;
        PExpression pexpressionNode5;
        TRBr trbrNode6;
        TEq teqNode7;
        PExpression pexpressionNode8;
        {
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        tlbrNode4 = (TLBr)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        trbrNode6 = (TRBr)nodeArrayList4.get(0);
        teqNode7 = (TEq)nodeArrayList5.get(0);
        pexpressionNode8 = (PExpression)nodeArrayList6.get(0);

        pstatementNode1 = new AArrayStatement(listNode2, tidNode3, tlbrNode4, pexpressionNode5, trbrNode6, teqNode7, pexpressionNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TId tidNode4;
        TLBr tlbrNode5;
        PExpression pexpressionNode6;
        TRBr trbrNode7;
        TEq teqNode8;
        PExpression pexpressionNode9;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tlbrNode5 = (TLBr)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);
        trbrNode7 = (TRBr)nodeArrayList5.get(0);
        teqNode8 = (TEq)nodeArrayList6.get(0);
        pexpressionNode9 = (PExpression)nodeArrayList7.get(0);

        pstatementNode1 = new AArrayStatement(listNode3, tidNode4, tlbrNode5, pexpressionNode6, trbrNode7, teqNode8, pexpressionNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TAssert tassertNode3;
        PExpression pexpressionNode4;
        Object nullNode5 = null;
        {
        }
        tassertNode3 = (TAssert)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AAssertStatement(listNode2, tassertNode3, pexpressionNode4, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TAssert tassertNode4;
        PExpression pexpressionNode5;
        Object nullNode6 = null;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tassertNode4 = (TAssert)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssertStatement(listNode3, tassertNode4, pexpressionNode5, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TAssert tassertNode3;
        PExpression pexpressionNode4;
        PGroupCommaExpr pgroupcommaexprNode5;
        {
        }
        tassertNode3 = (TAssert)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        pgroupcommaexprNode5 = (PGroupCommaExpr)nodeArrayList3.get(0);

        pstatementNode1 = new AAssertStatement(listNode2, tassertNode3, pexpressionNode4, pgroupcommaexprNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TAssert tassertNode4;
        PExpression pexpressionNode5;
        PGroupCommaExpr pgroupcommaexprNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tassertNode4 = (TAssert)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        pgroupcommaexprNode6 = (PGroupCommaExpr)nodeArrayList4.get(0);

        pstatementNode1 = new AAssertStatement(listNode3, tassertNode4, pexpressionNode5, pgroupcommaexprNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PFunctionCall pfunctioncallNode3;
        {
        }
        pfunctioncallNode3 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFunctionCallStatement(listNode2, pfunctioncallNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PFunctionCall pfunctioncallNode4;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pfunctioncallNode4 = (PFunctionCall)nodeArrayList2.get(0);

        pstatementNode1 = new AFunctionCallStatement(listNode3, pfunctioncallNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PAdditionSubition padditionsubitionNode2;
        padditionsubitionNode2 = (PAdditionSubition)nodeArrayList1.get(0);

        pexpressionNode1 = new AAddExpression(padditionsubitionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TId tidNode2;
        TLBr tlbrNode3;
        PExpression pexpressionNode4;
        TRBr trbrNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlbrNode3 = (TLBr)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trbrNode5 = (TRBr)nodeArrayList4.get(0);

        pexpressionNode1 = new AIdBrExpression(tidNode2, tlbrNode3, pexpressionNode4, trbrNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFunctionCExpression(pfunctioncallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdentifierExpression(tidNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TLen tlenNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        tlenNode2 = (TLen)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pexpressionNode1 = new ALenExpression(tlenNode2, tlparNode3, pexpressionNode4, trparNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PMaxMin pmaxminNode2;
        TLPar tlparNode3;
        PValue pvalueNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRPar trparNode6;
        pmaxminNode2 = (PMaxMin)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        {
        }
        trparNode6 = (TRPar)nodeArrayList4.get(0);

        pexpressionNode1 = new AExprMaxMinExpression(pmaxminNode2, tlparNode3, pvalueNode4, listNode5, trparNode6);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PMaxMin pmaxminNode2;
        TLPar tlparNode3;
        PValue pvalueNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TRPar trparNode7;
        pmaxminNode2 = (PMaxMin)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList5.get(0);

        pexpressionNode1 = new AExprMaxMinExpression(pmaxminNode2, tlparNode3, pvalueNode4, listNode6, trparNode7);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TLBr tlbrNode2;
        PExpression pexpressionNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TRBr trbrNode5;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        {
        }
        trbrNode5 = (TRBr)nodeArrayList3.get(0);

        pexpressionNode1 = new AGroupExpressionInBrExpression(tlbrNode2, pexpressionNode3, listNode4, trbrNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TLBr tlbrNode2;
        PExpression pexpressionNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRBr trbrNode6;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbrNode6 = (TRBr)nodeArrayList4.get(0);

        pexpressionNode1 = new AGroupExpressionInBrExpression(tlbrNode2, pexpressionNode3, listNode5, trbrNode6);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportType pimporttypeNode1;
        {
        TImport timportNode2;
        PModule pmoduleNode3;
        Object nullNode4 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        timportNode2 = (TImport)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        {
        }

        pimporttypeNode1 = new ASimplyImportImportType(timportNode2, pmoduleNode3, null, listNode5);
        }
	nodeList.add(pimporttypeNode1);
        return nodeList;
    }



    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportType pimporttypeNode1;
        {
        TImport timportNode2;
        PModule pmoduleNode3;
        PGroupAsId pgroupasidNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        timportNode2 = (TImport)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        pgroupasidNode4 = (PGroupAsId)nodeArrayList3.get(0);
        {
        }

        pimporttypeNode1 = new ASimplyImportImportType(timportNode2, pmoduleNode3, pgroupasidNode4, listNode5);
        }
	nodeList.add(pimporttypeNode1);
        return nodeList;
    }



    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportType pimporttypeNode1;
        {
        TImport timportNode2;
        PModule pmoduleNode3;
        Object nullNode4 = null;
        TypedLinkedList listNode6 = new TypedLinkedList();
        timportNode2 = (TImport)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pimporttypeNode1 = new ASimplyImportImportType(timportNode2, pmoduleNode3, null, listNode6);
        }
	nodeList.add(pimporttypeNode1);
        return nodeList;
    }



    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportType pimporttypeNode1;
        {
        TImport timportNode2;
        PModule pmoduleNode3;
        PGroupAsId pgroupasidNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        timportNode2 = (TImport)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        pgroupasidNode4 = (PGroupAsId)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pimporttypeNode1 = new ASimplyImportImportType(timportNode2, pmoduleNode3, pgroupasidNode4, listNode6);
        }
	nodeList.add(pimporttypeNode1);
        return nodeList;
    }



    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportType pimporttypeNode1;
        {
        TFrom tfromNode2;
        PModule pmoduleNode3;
        TImport timportNode4;
        TId tidNode5;
        Object nullNode6 = null;
        TypedLinkedList listNode7 = new TypedLinkedList();
        tfromNode2 = (TFrom)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        timportNode4 = (TImport)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        {
        }

        pimporttypeNode1 = new AFromInportImportType(tfromNode2, pmoduleNode3, timportNode4, tidNode5, null, listNode7);
        }
	nodeList.add(pimporttypeNode1);
        return nodeList;
    }



    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportType pimporttypeNode1;
        {
        TFrom tfromNode2;
        PModule pmoduleNode3;
        TImport timportNode4;
        TId tidNode5;
        PGroupAsId pgroupasidNode6;
        TypedLinkedList listNode7 = new TypedLinkedList();
        tfromNode2 = (TFrom)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        timportNode4 = (TImport)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        pgroupasidNode6 = (PGroupAsId)nodeArrayList5.get(0);
        {
        }

        pimporttypeNode1 = new AFromInportImportType(tfromNode2, pmoduleNode3, timportNode4, tidNode5, pgroupasidNode6, listNode7);
        }
	nodeList.add(pimporttypeNode1);
        return nodeList;
    }



    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportType pimporttypeNode1;
        {
        TFrom tfromNode2;
        PModule pmoduleNode3;
        TImport timportNode4;
        TId tidNode5;
        Object nullNode6 = null;
        TypedLinkedList listNode8 = new TypedLinkedList();
        tfromNode2 = (TFrom)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        timportNode4 = (TImport)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pimporttypeNode1 = new AFromInportImportType(tfromNode2, pmoduleNode3, timportNode4, tidNode5, null, listNode8);
        }
	nodeList.add(pimporttypeNode1);
        return nodeList;
    }



    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportType pimporttypeNode1;
        {
        TFrom tfromNode2;
        PModule pmoduleNode3;
        TImport timportNode4;
        TId tidNode5;
        PGroupAsId pgroupasidNode6;
        TypedLinkedList listNode8 = new TypedLinkedList();
        tfromNode2 = (TFrom)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        timportNode4 = (TImport)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        pgroupasidNode6 = (PGroupAsId)nodeArrayList5.get(0);
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pimporttypeNode1 = new AFromInportImportType(tfromNode2, pmoduleNode3, timportNode4, tidNode5, pgroupasidNode6, listNode8);
        }
	nodeList.add(pimporttypeNode1);
        return nodeList;
    }



    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PModule pmoduleNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TId tidNode3;
        {
        }
        tidNode3 = (TId)nodeArrayList1.get(0);

        pmoduleNode1 = new AModule(listNode2, tidNode3);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PModule pmoduleNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TId tidNode4;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tidNode4 = (TId)nodeArrayList2.get(0);

        pmoduleNode1 = new AModule(listNode3, tidNode4);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        PCompTypes pcomptypesNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pcomptypesNode3 = (PCompTypes)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new ACompareExpressionComparison(pexpressionNode2, pcomptypesNode3, pexpressionNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pcomparisonNode1 = new ATrueComparison(ttrueNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pcomparisonNode1 = new AFalseComparison(tfalseNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TId tidNode2;
        TLPar tlparNode3;
        Object nullNode4 = null;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TId tidNode2;
        TLPar tlparNode3;
        PArglist parglistNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        parglistNode4 = (PArglist)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidNode2, tlparNode3, parglistNode4, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        }

        parglistNode1 = new AGroupExpressionArglist(pexpressionNode2, listNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parglistNode1 = new AGroupExpressionArglist(pexpressionNode2, listNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPower ppowerNode1;
        {
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        ppowerNode1 = new AValuePower(pvalueNode2);
        }
	nodeList.add(ppowerNode1);
        return nodeList;
    }



    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPower ppowerNode1;
        {
        PPower ppowerNode2;
        TDmult tdmultNode3;
        PValue pvalueNode4;
        ppowerNode2 = (PPower)nodeArrayList1.get(0);
        tdmultNode3 = (TDmult)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        ppowerNode1 = new ADmultPower(ppowerNode2, tdmultNode3, pvalueNode4);
        }
	nodeList.add(ppowerNode1);
        return nodeList;
    }



    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultiplication pmultiplicationNode1;
        {
        PPower ppowerNode2;
        ppowerNode2 = (PPower)nodeArrayList1.get(0);

        pmultiplicationNode1 = new APowerMultiplication(ppowerNode2);
        }
	nodeList.add(pmultiplicationNode1);
        return nodeList;
    }



    ArrayList new59()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultiplication pmultiplicationNode1;
        {
        PMultiplication pmultiplicationNode2;
        TMult tmultNode3;
        PPower ppowerNode4;
        pmultiplicationNode2 = (PMultiplication)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        ppowerNode4 = (PPower)nodeArrayList3.get(0);

        pmultiplicationNode1 = new AMultMultiplication(pmultiplicationNode2, tmultNode3, ppowerNode4);
        }
	nodeList.add(pmultiplicationNode1);
        return nodeList;
    }



    ArrayList new60()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultiplication pmultiplicationNode1;
        {
        PMultiplication pmultiplicationNode2;
        TDiv tdivNode3;
        PPower ppowerNode4;
        pmultiplicationNode2 = (PMultiplication)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        ppowerNode4 = (PPower)nodeArrayList3.get(0);

        pmultiplicationNode1 = new ADivMultiplication(pmultiplicationNode2, tdivNode3, ppowerNode4);
        }
	nodeList.add(pmultiplicationNode1);
        return nodeList;
    }



    ArrayList new61()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultiplication pmultiplicationNode1;
        {
        PMultiplication pmultiplicationNode2;
        TPercent tpercentNode3;
        PPower ppowerNode4;
        pmultiplicationNode2 = (PMultiplication)nodeArrayList1.get(0);
        tpercentNode3 = (TPercent)nodeArrayList2.get(0);
        ppowerNode4 = (PPower)nodeArrayList3.get(0);

        pmultiplicationNode1 = new APercentMultiplication(pmultiplicationNode2, tpercentNode3, ppowerNode4);
        }
	nodeList.add(pmultiplicationNode1);
        return nodeList;
    }



    ArrayList new62()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAdditionSubition padditionsubitionNode1;
        {
        PMultiplication pmultiplicationNode2;
        pmultiplicationNode2 = (PMultiplication)nodeArrayList1.get(0);

        padditionsubitionNode1 = new AMultiplicationAdditionSubition(pmultiplicationNode2);
        }
	nodeList.add(padditionsubitionNode1);
        return nodeList;
    }



    ArrayList new63()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAdditionSubition padditionsubitionNode1;
        {
        PAdditionSubition padditionsubitionNode2;
        TPlus tplusNode3;
        PMultiplication pmultiplicationNode4;
        padditionsubitionNode2 = (PAdditionSubition)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pmultiplicationNode4 = (PMultiplication)nodeArrayList3.get(0);

        padditionsubitionNode1 = new AAddAdditionSubition(padditionsubitionNode2, tplusNode3, pmultiplicationNode4);
        }
	nodeList.add(padditionsubitionNode1);
        return nodeList;
    }



    ArrayList new64()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAdditionSubition padditionsubitionNode1;
        {
        PAdditionSubition padditionsubitionNode2;
        TMinus tminusNode3;
        PMultiplication pmultiplicationNode4;
        padditionsubitionNode2 = (PAdditionSubition)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pmultiplicationNode4 = (PMultiplication)nodeArrayList3.get(0);

        padditionsubitionNode1 = new ASubAdditionSubition(padditionsubitionNode2, tminusNode3, pmultiplicationNode4);
        }
	nodeList.add(padditionsubitionNode1);
        return nodeList;
    }



    ArrayList new65()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TId tidNode2;
        TDot tdotNode3;
        PFunctionCall pfunctioncallNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pfunctioncallNode4 = (PFunctionCall)nodeArrayList3.get(0);

        pvalueNode1 = new AFunCallValue(tidNode2, tdotNode3, pfunctioncallNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new66()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pvalueNode1 = new ANumberValue(tnumberNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new67()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalueNode1 = new AStrValue(tstringNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new68()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TNone tnoneNode2;
        tnoneNode2 = (TNone)nodeArrayList1.get(0);

        pvalueNode1 = new ANoneValue(tnoneNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new69()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupFuncStat pgroupfuncstatNode1;
        {
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pgroupfuncstatNode1 = new AFunctionGroupFuncStat(pfunctionNode2);
        }
	nodeList.add(pgroupfuncstatNode1);
        return nodeList;
    }



    ArrayList new70()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupFuncStat pgroupfuncstatNode1;
        {
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pgroupfuncstatNode1 = new AStatementGroupFuncStat(pstatementNode2);
        }
	nodeList.add(pgroupfuncstatNode1);
        return nodeList;
    }



    ArrayList new71()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupCommaIdEqVal pgroupcommaideqvalNode1;
        {
        TComma tcommaNode2;
        TId tidNode3;
        Object nullNode4 = null;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pgroupcommaideqvalNode1 = new AGroupCommaIdEqVal(tcommaNode2, tidNode3, null);
        }
	nodeList.add(pgroupcommaideqvalNode1);
        return nodeList;
    }



    ArrayList new72()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupCommaIdEqVal pgroupcommaideqvalNode1;
        {
        TComma tcommaNode2;
        TId tidNode3;
        PGroupEqVal pgroupeqvalNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pgroupeqvalNode4 = (PGroupEqVal)nodeArrayList3.get(0);

        pgroupcommaideqvalNode1 = new AGroupCommaIdEqVal(tcommaNode2, tidNode3, pgroupeqvalNode4);
        }
	nodeList.add(pgroupcommaideqvalNode1);
        return nodeList;
    }



    ArrayList new73()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupEqVal pgroupeqvalNode1;
        {
        TEq teqNode2;
        PValue pvalueNode3;
        teqNode2 = (TEq)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        pgroupeqvalNode1 = new AGroupEqVal(teqNode2, pvalueNode3);
        }
	nodeList.add(pgroupeqvalNode1);
        return nodeList;
    }



    ArrayList new74()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupCommaId pgroupcommaidNode1;
        {
        TComma tcommaNode2;
        TId tidNode3;
        Object nullNode4 = null;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pgroupcommaidNode1 = new AGroupCommaId(tcommaNode2, tidNode3, null);
        }
	nodeList.add(pgroupcommaidNode1);
        return nodeList;
    }



    ArrayList new75()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupCommaId pgroupcommaidNode1;
        {
        TComma tcommaNode2;
        TId tidNode3;
        PGroupAsId pgroupasidNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pgroupasidNode4 = (PGroupAsId)nodeArrayList3.get(0);

        pgroupcommaidNode1 = new AGroupCommaId(tcommaNode2, tidNode3, pgroupasidNode4);
        }
	nodeList.add(pgroupcommaidNode1);
        return nodeList;
    }



    ArrayList new76()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupMod pgroupmodNode1;
        {
        TComma tcommaNode2;
        PModule pmoduleNode3;
        Object nullNode4 = null;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);

        pgroupmodNode1 = new AGroupMod(tcommaNode2, pmoduleNode3, null);
        }
	nodeList.add(pgroupmodNode1);
        return nodeList;
    }



    ArrayList new77()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupMod pgroupmodNode1;
        {
        TComma tcommaNode2;
        PModule pmoduleNode3;
        PGroupAsId pgroupasidNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        pgroupasidNode4 = (PGroupAsId)nodeArrayList3.get(0);

        pgroupmodNode1 = new AGroupMod(tcommaNode2, pmoduleNode3, pgroupasidNode4);
        }
	nodeList.add(pgroupmodNode1);
        return nodeList;
    }



    ArrayList new78()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupIdDot pgroupiddotNode1;
        {
        TId tidNode2;
        TDot tdotNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);

        pgroupiddotNode1 = new AGroupIdDot(tidNode2, tdotNode3);
        }
	nodeList.add(pgroupiddotNode1);
        return nodeList;
    }



    ArrayList new79()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupCommaVal pgroupcommavalNode1;
        {
        TComma tcommaNode2;
        PValue pvalueNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        pgroupcommavalNode1 = new AGroupCommaVal(tcommaNode2, pvalueNode3);
        }
	nodeList.add(pgroupcommavalNode1);
        return nodeList;
    }



    ArrayList new80()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupCommaExpr pgroupcommaexprNode1;
        {
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pgroupcommaexprNode1 = new AGroupCommaExpr(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pgroupcommaexprNode1);
        return nodeList;
    }



    ArrayList new81()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGroupAsId pgroupasidNode1;
        {
        TAs tasNode2;
        TId tidNode3;
        tasNode2 = (TAs)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pgroupasidNode1 = new AGroupAsId(tasNode2, tidNode3);
        }
	nodeList.add(pgroupasidNode1);
        return nodeList;
    }



    ArrayList new82()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompEqs pcompeqsNode1;
        {
        TEq teqNode2;
        teqNode2 = (TEq)nodeArrayList1.get(0);

        pcompeqsNode1 = new AEqualCompEqs(teqNode2);
        }
	nodeList.add(pcompeqsNode1);
        return nodeList;
    }



    ArrayList new83()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompEqs pcompeqsNode1;
        {
        TMinusEq tminuseqNode2;
        tminuseqNode2 = (TMinusEq)nodeArrayList1.get(0);

        pcompeqsNode1 = new AMinusEqualCompEqs(tminuseqNode2);
        }
	nodeList.add(pcompeqsNode1);
        return nodeList;
    }



    ArrayList new84()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompEqs pcompeqsNode1;
        {
        TDivEq tdiveqNode2;
        tdiveqNode2 = (TDivEq)nodeArrayList1.get(0);

        pcompeqsNode1 = new ADivEqualCompEqs(tdiveqNode2);
        }
	nodeList.add(pcompeqsNode1);
        return nodeList;
    }



    ArrayList new85()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompTypes pcomptypesNode1;
        {
        TLess tlessNode2;
        tlessNode2 = (TLess)nodeArrayList1.get(0);

        pcomptypesNode1 = new ALessCompTypes(tlessNode2);
        }
	nodeList.add(pcomptypesNode1);
        return nodeList;
    }



    ArrayList new86()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompTypes pcomptypesNode1;
        {
        TGreat tgreatNode2;
        tgreatNode2 = (TGreat)nodeArrayList1.get(0);

        pcomptypesNode1 = new AGreatCompTypes(tgreatNode2);
        }
	nodeList.add(pcomptypesNode1);
        return nodeList;
    }



    ArrayList new87()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompTypes pcomptypesNode1;
        {
        TGreatEq tgreateqNode2;
        tgreateqNode2 = (TGreatEq)nodeArrayList1.get(0);

        pcomptypesNode1 = new AGreatEqualCompTypes(tgreateqNode2);
        }
	nodeList.add(pcomptypesNode1);
        return nodeList;
    }



    ArrayList new88()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompTypes pcomptypesNode1;
        {
        TLessEq tlesseqNode2;
        tlesseqNode2 = (TLessEq)nodeArrayList1.get(0);

        pcomptypesNode1 = new ALessEqualCompTypes(tlesseqNode2);
        }
	nodeList.add(pcomptypesNode1);
        return nodeList;
    }



    ArrayList new89()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompTypes pcomptypesNode1;
        {
        TNotEq tnoteqNode2;
        tnoteqNode2 = (TNotEq)nodeArrayList1.get(0);

        pcomptypesNode1 = new ANotEqualCompTypes(tnoteqNode2);
        }
	nodeList.add(pcomptypesNode1);
        return nodeList;
    }



    ArrayList new90()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCompTypes pcomptypesNode1;
        {
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pcomptypesNode1 = new AEqualCompTypes(tequalNode2);
        }
	nodeList.add(pcomptypesNode1);
        return nodeList;
    }



    ArrayList new91()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMaxMin pmaxminNode1;
        {
        TMax tmaxNode2;
        tmaxNode2 = (TMax)nodeArrayList1.get(0);

        pmaxminNode1 = new AMaxMaxMin(tmaxNode2);
        }
	nodeList.add(pmaxminNode1);
        return nodeList;
    }



    ArrayList new92()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMaxMin pmaxminNode1;
        {
        TMin tminNode2;
        tminNode2 = (TMin)nodeArrayList1.get(0);

        pmaxminNode1 = new AMinMaxMin(tminNode2);
        }
	nodeList.add(pmaxminNode1);
        return nodeList;
    }



    ArrayList new93()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMathTypes pmathtypesNode1;
        {
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pmathtypesNode1 = new APlusMathTypes(tplusNode2);
        }
	nodeList.add(pmathtypesNode1);
        return nodeList;
    }



    ArrayList new94()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMathTypes pmathtypesNode1;
        {
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pmathtypesNode1 = new AMinusMathTypes(tminusNode2);
        }
	nodeList.add(pmathtypesNode1);
        return nodeList;
    }



    ArrayList new95()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMathTypes pmathtypesNode1;
        {
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        pmathtypesNode1 = new AMultMathTypes(tmultNode2);
        }
	nodeList.add(pmathtypesNode1);
        return nodeList;
    }



    ArrayList new96()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMathTypes pmathtypesNode1;
        {
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        pmathtypesNode1 = new ADivMathTypes(tdivNode2);
        }
	nodeList.add(pmathtypesNode1);
        return nodeList;
    }



    ArrayList new97()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMathTypes pmathtypesNode1;
        {
        TPercent tpercentNode2;
        tpercentNode2 = (TPercent)nodeArrayList1.get(0);

        pmathtypesNode1 = new AModMathTypes(tpercentNode2);
        }
	nodeList.add(pmathtypesNode1);
        return nodeList;
    }



    ArrayList new98()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMathTypes pmathtypesNode1;
        {
        TDmult tdmultNode2;
        tdmultNode2 = (TDmult)nodeArrayList1.get(0);

        pmathtypesNode1 = new APowMathTypes(tdmultNode2);
        }
	nodeList.add(pmathtypesNode1);
        return nodeList;
    }



    ArrayList new99()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PNotComp pnotcompNode1;
        {
        PComparison pcomparisonNode2;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);

        pnotcompNode1 = new ABooleanNotComp(pcomparisonNode2);
        }
	nodeList.add(pnotcompNode1);
        return nodeList;
    }



    ArrayList new100()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PNotComp pnotcompNode1;
        {
        TNot tnotNode2;
        PComparison pcomparisonNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pcomparisonNode3 = (PComparison)nodeArrayList2.get(0);

        pnotcompNode1 = new ANotNotComp(tnotNode2, pcomparisonNode3);
        }
	nodeList.add(pnotcompNode1);
        return nodeList;
    }



    ArrayList new101()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAndComp pandcompNode1;
        {
        PNotComp pnotcompNode2;
        pnotcompNode2 = (PNotComp)nodeArrayList1.get(0);

        pandcompNode1 = new ANotFromAndAndComp(pnotcompNode2);
        }
	nodeList.add(pandcompNode1);
        return nodeList;
    }



    ArrayList new102()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAndComp pandcompNode1;
        {
        PAndComp pandcompNode2;
        TAnd tandNode3;
        PNotComp pnotcompNode4;
        pandcompNode2 = (PAndComp)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pnotcompNode4 = (PNotComp)nodeArrayList3.get(0);

        pandcompNode1 = new AAndAndComp(pandcompNode2, tandNode3, pnotcompNode4);
        }
	nodeList.add(pandcompNode1);
        return nodeList;
    }



    ArrayList new103()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        POrComp porcompNode1;
        {
        PAndComp pandcompNode2;
        pandcompNode2 = (PAndComp)nodeArrayList1.get(0);

        porcompNode1 = new AAndFromOrOrComp(pandcompNode2);
        }
	nodeList.add(porcompNode1);
        return nodeList;
    }



    ArrayList new104()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        POrComp porcompNode1;
        {
        POrComp porcompNode2;
        TOr torNode3;
        PAndComp pandcompNode4;
        porcompNode2 = (POrComp)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pandcompNode4 = (PAndComp)nodeArrayList3.get(0);

        porcompNode1 = new AOrOrComp(porcompNode2, torNode3, pandcompNode4);
        }
	nodeList.add(porcompNode1);
        return nodeList;
    }



    ArrayList new105()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PGroupFuncStat pgroupfuncstatNode1;
        pgroupfuncstatNode1 = (PGroupFuncStat)nodeArrayList1.get(0);
	if(pgroupfuncstatNode1 != null)
	{
	  listNode2.add(pgroupfuncstatNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new106()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PGroupFuncStat pgroupfuncstatNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pgroupfuncstatNode2 = (PGroupFuncStat)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgroupfuncstatNode2 != null)
	{
	  listNode3.add(pgroupfuncstatNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new107()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PGroupCommaIdEqVal pgroupcommaideqvalNode1;
        pgroupcommaideqvalNode1 = (PGroupCommaIdEqVal)nodeArrayList1.get(0);
	if(pgroupcommaideqvalNode1 != null)
	{
	  listNode2.add(pgroupcommaideqvalNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new108()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PGroupCommaIdEqVal pgroupcommaideqvalNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pgroupcommaideqvalNode2 = (PGroupCommaIdEqVal)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgroupcommaideqvalNode2 != null)
	{
	  listNode3.add(pgroupcommaideqvalNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new109()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TTab ttabNode1;
        ttabNode1 = (TTab)nodeArrayList1.get(0);
	if(ttabNode1 != null)
	{
	  listNode2.add(ttabNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new110()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TTab ttabNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        ttabNode2 = (TTab)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ttabNode2 != null)
	{
	  listNode3.add(ttabNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new111()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PGroupCommaExpr pgroupcommaexprNode1;
        pgroupcommaexprNode1 = (PGroupCommaExpr)nodeArrayList1.get(0);
	if(pgroupcommaexprNode1 != null)
	{
	  listNode2.add(pgroupcommaexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new112()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PGroupCommaExpr pgroupcommaexprNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pgroupcommaexprNode2 = (PGroupCommaExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgroupcommaexprNode2 != null)
	{
	  listNode3.add(pgroupcommaexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new113()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PGroupCommaVal pgroupcommavalNode1;
        pgroupcommavalNode1 = (PGroupCommaVal)nodeArrayList1.get(0);
	if(pgroupcommavalNode1 != null)
	{
	  listNode2.add(pgroupcommavalNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new114()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PGroupCommaVal pgroupcommavalNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pgroupcommavalNode2 = (PGroupCommaVal)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgroupcommavalNode2 != null)
	{
	  listNode3.add(pgroupcommavalNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new115()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PGroupMod pgroupmodNode1;
        pgroupmodNode1 = (PGroupMod)nodeArrayList1.get(0);
	if(pgroupmodNode1 != null)
	{
	  listNode2.add(pgroupmodNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new116()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PGroupMod pgroupmodNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pgroupmodNode2 = (PGroupMod)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgroupmodNode2 != null)
	{
	  listNode3.add(pgroupmodNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new117()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PGroupCommaId pgroupcommaidNode1;
        pgroupcommaidNode1 = (PGroupCommaId)nodeArrayList1.get(0);
	if(pgroupcommaidNode1 != null)
	{
	  listNode2.add(pgroupcommaidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new118()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PGroupCommaId pgroupcommaidNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pgroupcommaidNode2 = (PGroupCommaId)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgroupcommaidNode2 != null)
	{
	  listNode3.add(pgroupcommaidNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new119()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PGroupIdDot pgroupiddotNode1;
        pgroupiddotNode1 = (PGroupIdDot)nodeArrayList1.get(0);
	if(pgroupiddotNode1 != null)
	{
	  listNode2.add(pgroupiddotNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new120()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PGroupIdDot pgroupiddotNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pgroupiddotNode2 = (PGroupIdDot)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgroupiddotNode2 != null)
	{
	  listNode3.add(pgroupiddotNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {2, SHIFT, 1}, {3, SHIFT, 2}, {15, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {27, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 1}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 3}, {48, SHIFT, 32}, },
			{{-1, ERROR, 4}, {19, SHIFT, 17}, {26, SHIFT, 33}, {37, SHIFT, 34}, {39, SHIFT, 35}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 5}, {19, SHIFT, 17}, {26, SHIFT, 33}, {37, SHIFT, 34}, {39, SHIFT, 35}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 6}, {48, SHIFT, 42}, },
			{{-1, ERROR, 7}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 8}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 9}, {10, SHIFT, 45}, {11, SHIFT, 46}, {12, SHIFT, 47}, {17, SHIFT, 48}, {19, SHIFT, 49}, },
			{{-1, ERROR, 10}, {50, ACCEPT, -1}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 1}, {2, SHIFT, 1}, {3, SHIFT, 2}, {15, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {27, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 16}, {2, SHIFT, 52}, {3, SHIFT, 53}, {22, SHIFT, 54}, {23, SHIFT, 55}, {27, SHIFT, 56}, {29, SHIFT, 57}, {30, SHIFT, 58}, {48, SHIFT, 59}, },
			{{-1, ERROR, 17}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 18}, {17, SHIFT, 62}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 33}, {17, SHIFT, 48}, {19, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 24}, {21, SHIFT, 65}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 58}, {7, SHIFT, 67}, },
			{{-1, REDUCE, 62}, {6, SHIFT, 68}, {8, SHIFT, 69}, {9, SHIFT, 70}, },
			{{-1, REDUCE, 30}, {4, SHIFT, 71}, {5, SHIFT, 72}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 31}, {17, SHIFT, 73}, },
			{{-1, ERROR, 32}, {17, SHIFT, 74}, },
			{{-1, ERROR, 33}, {19, SHIFT, 17}, {37, SHIFT, 34}, {39, SHIFT, 35}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 36}, {31, SHIFT, 76}, {32, SHIFT, 77}, {33, SHIFT, 78}, {34, SHIFT, 79}, {35, SHIFT, 80}, {36, SHIFT, 81}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 103}, {24, SHIFT, 83}, },
			{{-1, ERROR, 40}, {25, SHIFT, 84}, {38, SHIFT, 85}, },
			{{-1, ERROR, 41}, {25, SHIFT, 84}, {38, SHIFT, 86}, },
			{{-1, ERROR, 42}, {28, SHIFT, 87}, },
			{{-1, REDUCE, 16}, {21, SHIFT, 65}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 48}, {18, SHIFT, 90}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 49}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 50}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 52}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 54}, {19, SHIFT, 17}, {26, SHIFT, 33}, {37, SHIFT, 34}, {39, SHIFT, 35}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 55}, {19, SHIFT, 17}, {26, SHIFT, 33}, {37, SHIFT, 34}, {39, SHIFT, 35}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 56}, {48, SHIFT, 98}, },
			{{-1, ERROR, 57}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 58}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 59}, {10, SHIFT, 45}, {11, SHIFT, 46}, {12, SHIFT, 47}, {17, SHIFT, 48}, {19, SHIFT, 101}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 61}, {20, SHIFT, 103}, {21, SHIFT, 65}, },
			{{-1, ERROR, 62}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 63}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 64}, {48, SHIFT, 107}, },
			{{-1, ERROR, 65}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 67}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 110}, {49, SHIFT, 24}, },
			{{-1, ERROR, 68}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 110}, {49, SHIFT, 24}, },
			{{-1, ERROR, 69}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 110}, {49, SHIFT, 24}, },
			{{-1, ERROR, 70}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 110}, {49, SHIFT, 24}, },
			{{-1, ERROR, 71}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 110}, {49, SHIFT, 24}, },
			{{-1, ERROR, 72}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 110}, {49, SHIFT, 24}, },
			{{-1, ERROR, 73}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 110}, {49, SHIFT, 24}, },
			{{-1, ERROR, 74}, {18, SHIFT, 118}, {48, SHIFT, 119}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 82}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 83}, {19, SHIFT, 17}, {26, SHIFT, 33}, {37, SHIFT, 34}, {39, SHIFT, 35}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 84}, {19, SHIFT, 17}, {26, SHIFT, 33}, {37, SHIFT, 34}, {39, SHIFT, 35}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 85}, {2, SHIFT, 1}, {3, SHIFT, 2}, {22, SHIFT, 4}, {23, SHIFT, 5}, {27, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 86}, {2, SHIFT, 1}, {3, SHIFT, 2}, {22, SHIFT, 4}, {23, SHIFT, 5}, {27, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 87}, {48, SHIFT, 126}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 18}, {21, SHIFT, 65}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 54}, {21, SHIFT, 65}, },
			{{-1, ERROR, 92}, {18, SHIFT, 129}, },
			{{-1, ERROR, 93}, {20, SHIFT, 130}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 25}, {21, SHIFT, 65}, },
			{{-1, ERROR, 96}, {25, SHIFT, 84}, {38, SHIFT, 132}, },
			{{-1, ERROR, 97}, {25, SHIFT, 84}, {38, SHIFT, 133}, },
			{{-1, ERROR, 98}, {28, SHIFT, 134}, },
			{{-1, REDUCE, 17}, {21, SHIFT, 65}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 101}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 102}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 104}, {20, SHIFT, 138}, {21, SHIFT, 65}, },
			{{-1, ERROR, 105}, {18, SHIFT, 139}, },
			{{-1, ERROR, 106}, {20, SHIFT, 140}, },
			{{-1, ERROR, 107}, {17, SHIFT, 48}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 110}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 59}, {7, SHIFT, 67}, },
			{{-1, REDUCE, 60}, {7, SHIFT, 67}, },
			{{-1, REDUCE, 61}, {7, SHIFT, 67}, },
			{{-1, REDUCE, 63}, {6, SHIFT, 68}, {8, SHIFT, 69}, {9, SHIFT, 70}, },
			{{-1, REDUCE, 64}, {6, SHIFT, 68}, {8, SHIFT, 69}, {9, SHIFT, 70}, },
			{{-1, ERROR, 117}, {18, SHIFT, 141}, {21, SHIFT, 142}, },
			{{-1, ERROR, 118}, {38, SHIFT, 145}, },
			{{-1, REDUCE, 4}, {10, SHIFT, 146}, {21, SHIFT, 147}, },
			{{-1, ERROR, 120}, {18, SHIFT, 151}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 104}, {24, SHIFT, 83}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 126}, {38, SHIFT, 152}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 55}, {21, SHIFT, 65}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 130}, {10, SHIFT, 153}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 132}, {2, SHIFT, 1}, {3, SHIFT, 2}, {22, SHIFT, 4}, {23, SHIFT, 5}, {27, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 133}, {2, SHIFT, 1}, {3, SHIFT, 2}, {22, SHIFT, 4}, {23, SHIFT, 5}, {27, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 134}, {48, SHIFT, 156}, },
			{{-1, REDUCE, 19}, {21, SHIFT, 65}, },
			{{-1, ERROR, 136}, {20, SHIFT, 157}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 142}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 110}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 144}, {18, SHIFT, 159}, {21, SHIFT, 142}, },
			{{-1, ERROR, 145}, {2, SHIFT, 1}, {3, SHIFT, 2}, {22, SHIFT, 4}, {23, SHIFT, 5}, {27, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 146}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 110}, {49, SHIFT, 24}, },
			{{-1, ERROR, 147}, {48, SHIFT, 163}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 5}, {21, SHIFT, 147}, },
			{{-1, REDUCE, 6}, {21, SHIFT, 147}, },
			{{-1, ERROR, 151}, {38, SHIFT, 166}, },
			{{-1, ERROR, 152}, {2, SHIFT, 1}, {3, SHIFT, 2}, {22, SHIFT, 4}, {23, SHIFT, 5}, {27, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 153}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 156}, {38, SHIFT, 169}, },
			{{-1, ERROR, 157}, {10, SHIFT, 170}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 71}, {10, SHIFT, 146}, },
			{{-1, REDUCE, 7}, {21, SHIFT, 147}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 166}, {2, SHIFT, 1}, {3, SHIFT, 2}, {22, SHIFT, 4}, {23, SHIFT, 5}, {27, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 169}, {2, SHIFT, 1}, {3, SHIFT, 2}, {22, SHIFT, 4}, {23, SHIFT, 5}, {27, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 170}, {19, SHIFT, 17}, {41, SHIFT, 18}, {42, SHIFT, 19}, {43, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 23}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 10}, },
			{{-1, 11}, },
			{{-1, 120}, },
			{{-1, 12}, {85, 124}, {86, 125}, {132, 154}, {133, 155}, {145, 161}, {152, 167}, {166, 172}, {169, 173}, },
			{{-1, 36}, {1, 25}, {7, 43}, {8, 44}, {17, 61}, {48, 91}, {49, 93}, {50, 94}, {52, 95}, {57, 99}, {58, 100}, {62, 105}, {63, 106}, {65, 109}, {82, 121}, {101, 136}, {102, 137}, {153, 168}, {170, 174}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 37}, {33, 75}, },
			{{-1, 26}, {0, 13}, {15, 13}, {16, 60}, {64, 108}, {85, 13}, {86, 13}, {132, 13}, {133, 13}, {145, 13}, {152, 13}, {166, 13}, {169, 13}, },
			{{-1, 92}, },
			{{-1, 27}, {68, 112}, {69, 113}, {70, 114}, },
			{{-1, 28}, {71, 115}, {72, 116}, },
			{{-1, 29}, },
			{{-1, 30}, {67, 111}, {73, 117}, {142, 158}, {146, 162}, },
			{{-1, 14}, {15, 51}, },
			{{-1, 148}, {150, 165}, {164, 165}, },
			{{-1, 149}, {163, 171}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 143}, {144, 160}, },
			{{-1, 88}, {25, 66}, {89, 127}, {95, 131}, {104, 127}, {128, 127}, {135, 127}, },
			{{-1, -1}, },
			{{-1, 50}, {59, 102}, },
			{{-1, 82}, },
			{{-1, 31}, },
			{{-1, -1}, },
			{{-1, 38}, {83, 122}, },
			{{-1, 39}, {84, 123}, },
			{{-1, 40}, {5, 41}, {54, 96}, {55, 97}, },
			{{-1, 15}, },
			{{-1, 150}, {149, 164}, },
			{{-1, 16}, },
			{{-1, 89}, {61, 104}, {91, 128}, {99, 135}, },
			{{-1, 144}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'assert', tab, 'def', 'if', 'while', 'for', 'print', 'return', id, EOF",
			"expecting: '[', 'len', 'max', 'min', 'None', number, id, string",
			"expecting: 'assert', tab, 'if', 'while', 'for', 'print', 'return', id",
			"expecting: id",
			"expecting: '[', 'not', 'true', 'false', 'len', 'max', 'min', 'None', number, id, string",
			"expecting: '=', '-=', '/=', '(', '['",
			"expecting: EOF",
			"expecting: '('",
			"expecting: 'assert', tab, '+', '-', '*', '**', '/', '%', 'def', ')', ']', ',', 'if', 'while', 'and', 'or', 'for', 'print', 'return', '<', '>', '>=', '<=', '!=', '==', ':', id, EOF",
			"expecting: 'assert', tab, 'def', '(', ')', '[', ']', ',', 'if', 'while', 'and', 'or', 'for', 'print', 'return', '<', '>', '>=', '<=', '!=', '==', ':', '.', id, EOF",
			"expecting: 'assert', tab, 'def', ',', 'if', 'while', 'for', 'print', 'return', id, EOF",
			"expecting: 'assert', tab, 'def', ')', ']', ',', 'if', 'while', 'and', 'or', 'for', 'print', 'return', '<', '>', '>=', '<=', '!=', '==', ':', id, EOF",
			"expecting: 'assert', tab, '+', '-', '*', '/', '%', 'def', ')', ']', ',', 'if', 'while', 'and', 'or', 'for', 'print', 'return', '<', '>', '>=', '<=', '!=', '==', ':', id, EOF",
			"expecting: 'assert', tab, '+', '-', 'def', ')', ']', ',', 'if', 'while', 'and', 'or', 'for', 'print', 'return', '<', '>', '>=', '<=', '!=', '==', ':', id, EOF",
			"expecting: '[', 'true', 'false', 'len', 'max', 'min', 'None', number, id, string",
			"expecting: 'and', 'or', ':'",
			"expecting: '<', '>', '>=', '<=', '!=', '=='",
			"expecting: 'or', ':'",
			"expecting: 'in'",
			"expecting: ')', '[', 'len', 'max', 'min', 'None', number, id, string",
			"expecting: ']', ','",
			"expecting: 'None', number, id, string",
			"expecting: ')', id",
			"expecting: 'assert', tab, 'def', ')', ']', ',', 'if', 'while', 'for', 'print', 'return', id, EOF",
			"expecting: ')', ','",
			"expecting: ')'",
			"expecting: ']'",
			"expecting: '.'",
			"expecting: ':'",
			"expecting: '=', ')', ','",
			"expecting: '='",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 3, 1, 1, 5, 6, 0, 0, 0, 0, 0, 2, 1, 7, 7, 7, 8, 8, 9, 8, 10, 11, 8, 12, 13, 8, 7, 7, 14, 15, 15, 16, 15, 15, 15, 17, 17, 18, 10, 0, 1, 1, 1, 19, 1, 1, 0, 1, 2, 4, 4, 3, 1, 1, 5, 0, 20, 1, 1, 3, 1, 0, 21, 21, 21, 21, 21, 21, 21, 22, 15, 1, 1, 1, 1, 1, 1, 1, 4, 4, 2, 2, 3, 23, 10, 8, 24, 25, 26, 0, 10, 17, 17, 18, 10, 0, 1, 1, 11, 20, 25, 26, 7, 8, 23, 27, 8, 8, 8, 8, 12, 12, 24, 28, 29, 25, 15, 15, 15, 0, 0, 28, 23, 24, 8, 30, 0, 2, 2, 3, 10, 26, 0, 11, 11, 11, 11, 21, 24, 24, 2, 21, 3, 24, 24, 24, 28, 2, 1, 0, 0, 28, 30, 24, 11, 24, 0, 24, 29, 24, 24, 2, 0, 0, 2, 1, 24, 0, 0, 0, 
        };*/
}
