Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z'];
	space = 32; 
	cr = 13; /*carriage return character \r*/
	lf = 10; /*line-feed character \n*/
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	import = 'import';
	def = 'def';
	l_par = '(';
	r_par = ')';
	semi = ':';
	as = 'as';
	eq = '=';
	comma=',';
	tab = 9;
	if = 'if';
	while = 'while';
	for = 'for';
	print = 'print';
	in = 'in';
	return = 'return';
	minus_eq = '-=';
	div_eq = '/=';
	l_br = '[';
	r_br = ']';
	assert = 'assert';
	plus = '+';
	minus = '-';
	mult = '*';
	dmult = '**';
	div = '/';
	percent = '%';
	exclam = '!';
	dict = 'dict';
	logic_plus = '&&';
	max = 'max';
	min = 'min';
	and = 'and';
	or = 'or';
	not = 'not';
	less = '<';
	great = '>';
	great_eq = '>=';
	less_eq = '<=';
	not_eq = '!=';
	equal = '==';
	true = 'true';
	false = 'false';
	quote = '"';
	len = 'len';
	from = 'from';
	dot = '.';
	none = 'None';
	line_comment = '#' not_eol* eol;
	number = digit+ | (digit+ '.' digit+);
	id = letter (letter | digit)*;
	string = '"'not_eol* '"'|'''not_eol* ''';
	blank = (space | lf | cr lf);
	

Ignored Tokens
	blank, line_comment;

Productions

	goal = group_func_stat*{->New goal([group_func_stat])};

	function = def id l_par argument? r_par semi statement{->New function(id,[argument],statement)};

	argument = id group_eq_val? group_comma_id_eq_val*{->New argument(id,[group_eq_val],[group_comma_id_eq_val])};

	statement = {if} tab* if or_comp semi statement{->New if(or_comp.comparison,statement)}|
				{while} tab* while or_comp semi statement{->New while(or_comp.comparison,statement)}|
				{for} tab* for [id1]: id in [id2]: id semi statement {->New for(id1,id2,statement)}|
				{return} tab* return expr{->New return(expr.expression)}|
				{print} tab* print expr group_comma_expr*{->New print(expr.expression,[group_comma_expr])}|
				{assing} tab* id comp_eqs expr{->New assing(id,comp_eqs,expr.expression)}|
				{array} tab* id l_br [expression1]:expr r_br eq [expression2]: expr{->New array(id,expression1,expression2)}|
				{assert} tab* assert expr group_comma_expr?{->New assert(expr.expression,[group_comma_expr])} |
				{function_call} tab* function_call{->New function_call(function_call)};
				

	expr{-> expression}={something} something{->New something.expression()}|
			{id_br}id l_br expr r_br{->New expression.id_br(expr.expression)}|
			{group_expression_in_br}l_br expr group_comma_expr* r_br{->New expression.group_expression_in_br(expr.expression,[group_comma_expr])}
			| {len}len l_par expr r_par{->New expression.len(expr.expression)};


	something{-> expression}=
			{function_c}function_call {-> New expression.function_c(function_call)}|
			{identifier}id {->New expression.identifier(id)}|
			 {value} value {->New expression.value(value)}|
			{expr_max_min}max_min l_par value group_comma_val* r_par{->New expression.expr_max_min(max_min,value,[group_comma_val])};	

	import_type = {simply_import} import module group_as_id? group_mod* {->New simply_import(module,[group_as_id],[group_mod])}|
			{from_import}from module import id group_as_id? group_comma_id* {->New from_import(module,[group_as_id],[group_comma_id])} ;

	module= group_id_dot* id {->New module([group_id_dot],id)};

	comparison= {compare_expression} [expression1]:expr comp_types [expression2]:expr {->New compare_expression(expression1,comp_types,expression2)} |
			{true} true {->New true()}|
			{false} false{->New false()} ; 

	function_call=  id l_par arglist? r_par {->New function_call(id,[arglist])};
	arglist= {group_expression} expr group_comma_expr* {->New arglist.group_expression(expr.expression,[group_comma_expr])};
	
	/*Priorities for mathiatics*/
	power{->expression} = {value} value {->value.expression} | {dmult} power dmult value{->New expression.dmult(power.expression,value.expression)};
	multiplication{->expression}= {power} power{->power.expression}|{mult} multiplication mult power{->New expression.mult(multiplication.expression,power.expression)}|{div} multiplication div power{->New expression.div(multiplication.expression,power.expression)} | {percent} multiplication percent power{->New expression.percent(multiplication.expression,power.expression)};
	addition_subition{->expression}={multiplication} multiplication {->multiplication.expression}|{add} addition_subition plus multiplication {->New expression.add(addition_subition.expression,multiplication.expression)}|{sub} addition_subition minus multiplication{->New expression.sub(addition_subition.expression,multiplication.expression)};
	
	
	value{-> expression} = {fun_call} id dot function_call {->New expression.fun_call(id,function_call)}| {number} number {->New expression.number(number)} | {str} string {-> New expression.str(string)}| {none}none {->New expression.none(none)}; 
	
	
	
	

	/* GROUPS */
	group_func_stat = {function} function {->New group_func_stat.function(function)}|{statement}statement {->New group_func_stat.statement(statement)};
	group_comma_id_eq_val = comma id group_eq_val? {->New group_comma_id_eq_val(id,[group_eq_val])};
	group_eq_val = eq value {->New group_eq_val(value.expression)};
	group_comma_id= comma id group_as_id?{->New group_comma_id(id,[group_as_id])};
	group_mod= comma module group_as_id? {->New group_mod(module,[group_as_id])};
	group_id_dot= id dot {->New group_id_dot(id)};
	group_comma_val= comma value {->New group_comma_val(value.expression)};
	group_comma_expr= comma expr {->New group_comma_expr(expr.expression)};
	group_as_id= as id {->New group_as_id(id)};
	
	/* Arithmetic , Logical , Comparison Operators */
	comp_eqs = {equal}eq {->New comp_eqs.equal()}|{minus_equal} minus_eq{->New comp_eqs.minus_equal()}|{div_equal} div_eq{->New comp_eqs.div_equal()};
	comp_types= {less} less{->New comp_types.less()}| {great} great{->New comp_types.great()}| {great_equal} great_eq{->New comp_types.great_equal()}|{less_equal} less_eq{->New comp_types.less_equal()}| {not_equal} not_eq{->New comp_types.not_equal()}| {equal} equal{->New comp_types.equal()};
	max_min= {max} max {->New max_min.max()} | {min} min {->New max_min.min()};
	
	

		
	/*Priorities for comparisons*/
	not_comp{->comparison}= {boolean} comparison{->comparison}|{not} not comparison{->New comparison.not(comparison)};
	and_comp{->comparison}= {not_from_and} not_comp{->not_comp.comparison}|{and} and_comp and not_comp{->New comparison.and(and_comp.comparison,not_comp.comparison)};
	or_comp{->comparison}= {and_from_or} and_comp{->and_comp.comparison}|{or} or_comp or and_comp{->New comparison.or(or_comp.comparison,and_comp.comparison)};


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Abstract Syntax Tree
	goal = group_func_stat*;

	function = id argument* statement;

	argument = id group_eq_val* group_comma_id_eq_val*;

	statement = {if}  comparison statement|
				{while}  comparison  statement|
				{for}  [id1]: id  [id2]: id statement|
				{return} expression|
				{print} expression group_comma_expr*|
				{assing} id comp_eqs expression|
				{array} id [expression1]:expression [expression2]: expression|
				{assert} expression group_comma_expr*|
				{function_call} function_call;
				

	expression={something} something|
	{dmult} [power]:expression [value]: expression|	
		{mult} [multiplication]:expression [power]: expression|
			{div} [multiplication]:expression [power]: expression |
			 {percent} [multiplication]:expression [power]: expression|
			 {add} [addition]: expression [multiplication]: expression|
			 {sub} [subition]:expression [multiplication]: expression|			
			{id_br}id expression|
			{function_c}function_call|
			{identifier}id|
			{len} expression |
			{expr_max_min}max_min expression group_comma_val* |
			{group_expression_in_br} expression group_comma_expr*
			|{fun_call} id function_call| {number} number | {str} string | {none}none;

			
			

	import_type = {simply_import} group_as_id* group_mod*|
			{from_import} id group_as_id* group_comma_id* ;

	module= group_id_dot* id;

	comparison= {compare_expression} [expression1]:expression comp_types [expression2]:expression|
		{not} comparison|
		{and} [comp1]: comparison [comp2]:comparison|
		{or} [comp1]: comparison [comp2]:comparison|
			{true} |
			{false} ; 

	function_call=  id arglist*;
	arglist= {group_expression} expression group_comma_expr*;

	
	
	/*value = {fun_call} id function_call| {number} number | {str} string | {none}none;*/
	
		

	/* GROUPS */
	group_func_stat = {function} function|{statement}statement;
	group_comma_id_eq_val = id group_eq_val*;
	group_eq_val = expression;
	group_comma_id= id group_as_id*;
	group_mod=  module group_as_id*;
	group_id_dot= id;
	group_comma_val= expression;
	group_comma_expr= expression;
	group_as_id= id;
	
	/* Arithmetic , Logical , Comparison Operators */
	comp_eqs = {equal}|{minus_equal} |{div_equal};
	comp_types= {less} | {great} | {great_equal} |{less_equal} | {not_equal} | {equal} ;
	max_min= {max}  | {min};
	
	

	