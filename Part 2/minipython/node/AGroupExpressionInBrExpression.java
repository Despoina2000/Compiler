/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AGroupExpressionInBrExpression extends PExpression
{
    private PExpression _expression_;
    private final LinkedList _groupCommaExpr_ = new TypedLinkedList(new GroupCommaExpr_Cast());

    public AGroupExpressionInBrExpression()
    {
    }

    public AGroupExpressionInBrExpression(
        PExpression _expression_,
        List _groupCommaExpr_)
    {
        setExpression(_expression_);

        {
            this._groupCommaExpr_.clear();
            this._groupCommaExpr_.addAll(_groupCommaExpr_);
        }

    }
    public Object clone()
    {
        return new AGroupExpressionInBrExpression(
            (PExpression) cloneNode(_expression_),
            cloneList(_groupCommaExpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGroupExpressionInBrExpression(this);
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public LinkedList getGroupCommaExpr()
    {
        return _groupCommaExpr_;
    }

    public void setGroupCommaExpr(List list)
    {
        _groupCommaExpr_.clear();
        _groupCommaExpr_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_expression_)
            + toString(_groupCommaExpr_);
    }

    void removeChild(Node child)
    {
        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_groupCommaExpr_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        for(ListIterator i = _groupCommaExpr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class GroupCommaExpr_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PGroupCommaExpr node = (PGroupCommaExpr) o;

            if((node.parent() != null) &&
                (node.parent() != AGroupExpressionInBrExpression.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AGroupExpressionInBrExpression.this))
            {
                node.parent(AGroupExpressionInBrExpression.this);
            }

            return node;
        }
    }
}
