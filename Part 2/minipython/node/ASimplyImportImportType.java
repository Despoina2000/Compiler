/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ASimplyImportImportType extends PImportType
{
    private final LinkedList _groupAsId_ = new TypedLinkedList(new GroupAsId_Cast());
    private final LinkedList _groupMod_ = new TypedLinkedList(new GroupMod_Cast());

    public ASimplyImportImportType()
    {
    }

    public ASimplyImportImportType(
        List _groupAsId_,
        List _groupMod_)
    {
        {
            this._groupAsId_.clear();
            this._groupAsId_.addAll(_groupAsId_);
        }

        {
            this._groupMod_.clear();
            this._groupMod_.addAll(_groupMod_);
        }

    }
    public Object clone()
    {
        return new ASimplyImportImportType(
            cloneList(_groupAsId_),
            cloneList(_groupMod_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimplyImportImportType(this);
    }

    public LinkedList getGroupAsId()
    {
        return _groupAsId_;
    }

    public void setGroupAsId(List list)
    {
        _groupAsId_.clear();
        _groupAsId_.addAll(list);
    }

    public LinkedList getGroupMod()
    {
        return _groupMod_;
    }

    public void setGroupMod(List list)
    {
        _groupMod_.clear();
        _groupMod_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_groupAsId_)
            + toString(_groupMod_);
    }

    void removeChild(Node child)
    {
        if(_groupAsId_.remove(child))
        {
            return;
        }

        if(_groupMod_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _groupAsId_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _groupMod_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class GroupAsId_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PGroupAsId node = (PGroupAsId) o;

            if((node.parent() != null) &&
                (node.parent() != ASimplyImportImportType.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ASimplyImportImportType.this))
            {
                node.parent(ASimplyImportImportType.this);
            }

            return node;
        }
    }

    private class GroupMod_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PGroupMod node = (PGroupMod) o;

            if((node.parent() != null) &&
                (node.parent() != ASimplyImportImportType.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ASimplyImportImportType.this))
            {
                node.parent(ASimplyImportImportType.this);
            }

            return node;
        }
    }
}
