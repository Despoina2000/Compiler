/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGoal(AGoal node);
    void caseAFunction(AFunction node);
    void caseAArgument(AArgument node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAAssingStatement(AAssingStatement node);
    void caseAArrayStatement(AArrayStatement node);
    void caseAAssertStatement(AAssertStatement node);
    void caseAFunctionCallStatement(AFunctionCallStatement node);
    void caseADmultExpression(ADmultExpression node);
    void caseAMultExpression(AMultExpression node);
    void caseADivExpression(ADivExpression node);
    void caseAPercentExpression(APercentExpression node);
    void caseAAddExpression(AAddExpression node);
    void caseASubExpression(ASubExpression node);
    void caseAIdBrExpression(AIdBrExpression node);
    void caseAFunctionCExpression(AFunctionCExpression node);
    void caseAIdentifierExpression(AIdentifierExpression node);
    void caseALenExpression(ALenExpression node);
    void caseAExprMaxMinExpression(AExprMaxMinExpression node);
    void caseAGroupExpressionInBrExpression(AGroupExpressionInBrExpression node);
    void caseAFunCallExpression(AFunCallExpression node);
    void caseANumberExpression(ANumberExpression node);
    void caseAStrExpression(AStrExpression node);
    void caseANoneExpression(ANoneExpression node);
    void caseASimplyImportImportType(ASimplyImportImportType node);
    void caseAFromImportImportType(AFromImportImportType node);
    void caseAModule(AModule node);
    void caseACompareExpressionComparison(ACompareExpressionComparison node);
    void caseANotComparison(ANotComparison node);
    void caseAAndComparison(AAndComparison node);
    void caseAOrComparison(AOrComparison node);
    void caseATrueComparison(ATrueComparison node);
    void caseAFalseComparison(AFalseComparison node);
    void caseAFunctionCall(AFunctionCall node);
    void caseAGroupExpressionArglist(AGroupExpressionArglist node);
    void caseAFunctionGroupFuncStat(AFunctionGroupFuncStat node);
    void caseAStatementGroupFuncStat(AStatementGroupFuncStat node);
    void caseAGroupCommaIdEqVal(AGroupCommaIdEqVal node);
    void caseAGroupEqVal(AGroupEqVal node);
    void caseAGroupCommaId(AGroupCommaId node);
    void caseAGroupMod(AGroupMod node);
    void caseAGroupIdDot(AGroupIdDot node);
    void caseAGroupCommaVal(AGroupCommaVal node);
    void caseAGroupCommaExpr(AGroupCommaExpr node);
    void caseAGroupAsId(AGroupAsId node);
    void caseAEqualCompEqs(AEqualCompEqs node);
    void caseAMinusEqualCompEqs(AMinusEqualCompEqs node);
    void caseADivEqualCompEqs(ADivEqualCompEqs node);
    void caseALessCompTypes(ALessCompTypes node);
    void caseAGreatCompTypes(AGreatCompTypes node);
    void caseAGreatEqualCompTypes(AGreatEqualCompTypes node);
    void caseALessEqualCompTypes(ALessEqualCompTypes node);
    void caseANotEqualCompTypes(ANotEqualCompTypes node);
    void caseAEqualCompTypes(AEqualCompTypes node);
    void caseAMaxMaxMin(AMaxMaxMin node);
    void caseAMinMaxMin(AMinMaxMin node);

    void caseTImport(TImport node);
    void caseTAs(TAs node);
    void caseTAssert(TAssert node);
    void caseTTab(TTab node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDmult(TDmult node);
    void caseTDiv(TDiv node);
    void caseTPercent(TPercent node);
    void caseTEq(TEq node);
    void caseTMinusEq(TMinusEq node);
    void caseTDivEq(TDivEq node);
    void caseTExclam(TExclam node);
    void caseTDict(TDict node);
    void caseTDef(TDef node);
    void caseTLogicPlus(TLogicPlus node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTComma(TComma node);
    void caseTIf(TIf node);
    void caseTWhile(TWhile node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTFor(TFor node);
    void caseTIn(TIn node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTLess(TLess node);
    void caseTGreat(TGreat node);
    void caseTGreatEq(TGreatEq node);
    void caseTLessEq(TLessEq node);
    void caseTNotEq(TNotEq node);
    void caseTEqual(TEqual node);
    void caseTTrue(TTrue node);
    void caseTSemi(TSemi node);
    void caseTFalse(TFalse node);
    void caseTQuote(TQuote node);
    void caseTLen(TLen node);
    void caseTMax(TMax node);
    void caseTMin(TMin node);
    void caseTFrom(TFrom node);
    void caseTDot(TDot node);
    void caseTNone(TNone node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTNumber(TNumber node);
    void caseTId(TId node);
    void caseTString(TString node);
    void caseEOF(EOF node);
}
