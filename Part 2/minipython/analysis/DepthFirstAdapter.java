/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPGoal().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getGroupFuncStat().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupFuncStat) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getArgument().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PArgument) temp[i]).apply(this);
            }
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAFunction(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getGroupEqVal().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupEqVal) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getGroupCommaIdEqVal().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaIdEqVal) temp[i]).apply(this);
            }
        }
        outAArgument(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getGroupCommaExpr().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaExpr) temp[i]).apply(this);
            }
        }
        outAPrintStatement(node);
    }

    public void inAAssingStatement(AAssingStatement node)
    {
        defaultIn(node);
    }

    public void outAAssingStatement(AAssingStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssingStatement(AAssingStatement node)
    {
        inAAssingStatement(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCompEqs() != null)
        {
            node.getCompEqs().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssingStatement(node);
    }

    public void inAArrayStatement(AArrayStatement node)
    {
        defaultIn(node);
    }

    public void outAArrayStatement(AArrayStatement node)
    {
        defaultOut(node);
    }

    public void caseAArrayStatement(AArrayStatement node)
    {
        inAArrayStatement(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAArrayStatement(node);
    }

    public void inAAssertStatement(AAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatement(AAssertStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        inAAssertStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getGroupCommaExpr().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaExpr) temp[i]).apply(this);
            }
        }
        outAAssertStatement(node);
    }

    public void inAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        inAFunctionCallStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallStatement(node);
    }

    public void inADmultExpression(ADmultExpression node)
    {
        defaultIn(node);
    }

    public void outADmultExpression(ADmultExpression node)
    {
        defaultOut(node);
    }

    public void caseADmultExpression(ADmultExpression node)
    {
        inADmultExpression(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outADmultExpression(node);
    }

    public void inAMultExpression(AMultExpression node)
    {
        defaultIn(node);
    }

    public void outAMultExpression(AMultExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultExpression(AMultExpression node)
    {
        inAMultExpression(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAMultExpression(node);
    }

    public void inADivExpression(ADivExpression node)
    {
        defaultIn(node);
    }

    public void outADivExpression(ADivExpression node)
    {
        defaultOut(node);
    }

    public void caseADivExpression(ADivExpression node)
    {
        inADivExpression(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outADivExpression(node);
    }

    public void inAPercentExpression(APercentExpression node)
    {
        defaultIn(node);
    }

    public void outAPercentExpression(APercentExpression node)
    {
        defaultOut(node);
    }

    public void caseAPercentExpression(APercentExpression node)
    {
        inAPercentExpression(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAPercentExpression(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getAddition() != null)
        {
            node.getAddition().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAAddExpression(node);
    }

    public void inASubExpression(ASubExpression node)
    {
        defaultIn(node);
    }

    public void outASubExpression(ASubExpression node)
    {
        defaultOut(node);
    }

    public void caseASubExpression(ASubExpression node)
    {
        inASubExpression(node);
        if(node.getSubition() != null)
        {
            node.getSubition().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outASubExpression(node);
    }

    public void inAIdBrExpression(AIdBrExpression node)
    {
        defaultIn(node);
    }

    public void outAIdBrExpression(AIdBrExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdBrExpression(AIdBrExpression node)
    {
        inAIdBrExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIdBrExpression(node);
    }

    public void inAFunctionCExpression(AFunctionCExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionCExpression(AFunctionCExpression node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCExpression(AFunctionCExpression node)
    {
        inAFunctionCExpression(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inALenExpression(ALenExpression node)
    {
        defaultIn(node);
    }

    public void outALenExpression(ALenExpression node)
    {
        defaultOut(node);
    }

    public void caseALenExpression(ALenExpression node)
    {
        inALenExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALenExpression(node);
    }

    public void inAExprMaxMinExpression(AExprMaxMinExpression node)
    {
        defaultIn(node);
    }

    public void outAExprMaxMinExpression(AExprMaxMinExpression node)
    {
        defaultOut(node);
    }

    public void caseAExprMaxMinExpression(AExprMaxMinExpression node)
    {
        inAExprMaxMinExpression(node);
        if(node.getMaxMin() != null)
        {
            node.getMaxMin().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getGroupCommaVal().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaVal) temp[i]).apply(this);
            }
        }
        outAExprMaxMinExpression(node);
    }

    public void inAGroupExpressionInBrExpression(AGroupExpressionInBrExpression node)
    {
        defaultIn(node);
    }

    public void outAGroupExpressionInBrExpression(AGroupExpressionInBrExpression node)
    {
        defaultOut(node);
    }

    public void caseAGroupExpressionInBrExpression(AGroupExpressionInBrExpression node)
    {
        inAGroupExpressionInBrExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getGroupCommaExpr().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaExpr) temp[i]).apply(this);
            }
        }
        outAGroupExpressionInBrExpression(node);
    }

    public void inAFunCallExpression(AFunCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFunCallExpression(AFunCallExpression node)
    {
        defaultOut(node);
    }

    public void caseAFunCallExpression(AFunCallExpression node)
    {
        inAFunCallExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunCallExpression(node);
    }

    public void inANumberExpression(ANumberExpression node)
    {
        defaultIn(node);
    }

    public void outANumberExpression(ANumberExpression node)
    {
        defaultOut(node);
    }

    public void caseANumberExpression(ANumberExpression node)
    {
        inANumberExpression(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberExpression(node);
    }

    public void inAStrExpression(AStrExpression node)
    {
        defaultIn(node);
    }

    public void outAStrExpression(AStrExpression node)
    {
        defaultOut(node);
    }

    public void caseAStrExpression(AStrExpression node)
    {
        inAStrExpression(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStrExpression(node);
    }

    public void inANoneExpression(ANoneExpression node)
    {
        defaultIn(node);
    }

    public void outANoneExpression(ANoneExpression node)
    {
        defaultOut(node);
    }

    public void caseANoneExpression(ANoneExpression node)
    {
        inANoneExpression(node);
        if(node.getNone() != null)
        {
            node.getNone().apply(this);
        }
        outANoneExpression(node);
    }

    public void inASimplyImportImportType(ASimplyImportImportType node)
    {
        defaultIn(node);
    }

    public void outASimplyImportImportType(ASimplyImportImportType node)
    {
        defaultOut(node);
    }

    public void caseASimplyImportImportType(ASimplyImportImportType node)
    {
        inASimplyImportImportType(node);
        {
            Object temp[] = node.getGroupAsId().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupAsId) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getGroupMod().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupMod) temp[i]).apply(this);
            }
        }
        outASimplyImportImportType(node);
    }

    public void inAFromImportImportType(AFromImportImportType node)
    {
        defaultIn(node);
    }

    public void outAFromImportImportType(AFromImportImportType node)
    {
        defaultOut(node);
    }

    public void caseAFromImportImportType(AFromImportImportType node)
    {
        inAFromImportImportType(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getGroupAsId().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupAsId) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getGroupCommaId().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaId) temp[i]).apply(this);
            }
        }
        outAFromImportImportType(node);
    }

    public void inAModule(AModule node)
    {
        defaultIn(node);
    }

    public void outAModule(AModule node)
    {
        defaultOut(node);
    }

    public void caseAModule(AModule node)
    {
        inAModule(node);
        {
            Object temp[] = node.getGroupIdDot().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupIdDot) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAModule(node);
    }

    public void inACompareExpressionComparison(ACompareExpressionComparison node)
    {
        defaultIn(node);
    }

    public void outACompareExpressionComparison(ACompareExpressionComparison node)
    {
        defaultOut(node);
    }

    public void caseACompareExpressionComparison(ACompareExpressionComparison node)
    {
        inACompareExpressionComparison(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getCompTypes() != null)
        {
            node.getCompTypes().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outACompareExpressionComparison(node);
    }

    public void inANotComparison(ANotComparison node)
    {
        defaultIn(node);
    }

    public void outANotComparison(ANotComparison node)
    {
        defaultOut(node);
    }

    public void caseANotComparison(ANotComparison node)
    {
        inANotComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANotComparison(node);
    }

    public void inAAndComparison(AAndComparison node)
    {
        defaultIn(node);
    }

    public void outAAndComparison(AAndComparison node)
    {
        defaultOut(node);
    }

    public void caseAAndComparison(AAndComparison node)
    {
        inAAndComparison(node);
        if(node.getComp1() != null)
        {
            node.getComp1().apply(this);
        }
        if(node.getComp2() != null)
        {
            node.getComp2().apply(this);
        }
        outAAndComparison(node);
    }

    public void inAOrComparison(AOrComparison node)
    {
        defaultIn(node);
    }

    public void outAOrComparison(AOrComparison node)
    {
        defaultOut(node);
    }

    public void caseAOrComparison(AOrComparison node)
    {
        inAOrComparison(node);
        if(node.getComp1() != null)
        {
            node.getComp1().apply(this);
        }
        if(node.getComp2() != null)
        {
            node.getComp2().apply(this);
        }
        outAOrComparison(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        outAFalseComparison(node);
    }

    public void inAFunctionCall(AFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCall(AFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        inAFunctionCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getArglist().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PArglist) temp[i]).apply(this);
            }
        }
        outAFunctionCall(node);
    }

    public void inAGroupExpressionArglist(AGroupExpressionArglist node)
    {
        defaultIn(node);
    }

    public void outAGroupExpressionArglist(AGroupExpressionArglist node)
    {
        defaultOut(node);
    }

    public void caseAGroupExpressionArglist(AGroupExpressionArglist node)
    {
        inAGroupExpressionArglist(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getGroupCommaExpr().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupCommaExpr) temp[i]).apply(this);
            }
        }
        outAGroupExpressionArglist(node);
    }

    public void inAFunctionGroupFuncStat(AFunctionGroupFuncStat node)
    {
        defaultIn(node);
    }

    public void outAFunctionGroupFuncStat(AFunctionGroupFuncStat node)
    {
        defaultOut(node);
    }

    public void caseAFunctionGroupFuncStat(AFunctionGroupFuncStat node)
    {
        inAFunctionGroupFuncStat(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionGroupFuncStat(node);
    }

    public void inAStatementGroupFuncStat(AStatementGroupFuncStat node)
    {
        defaultIn(node);
    }

    public void outAStatementGroupFuncStat(AStatementGroupFuncStat node)
    {
        defaultOut(node);
    }

    public void caseAStatementGroupFuncStat(AStatementGroupFuncStat node)
    {
        inAStatementGroupFuncStat(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementGroupFuncStat(node);
    }

    public void inAGroupCommaIdEqVal(AGroupCommaIdEqVal node)
    {
        defaultIn(node);
    }

    public void outAGroupCommaIdEqVal(AGroupCommaIdEqVal node)
    {
        defaultOut(node);
    }

    public void caseAGroupCommaIdEqVal(AGroupCommaIdEqVal node)
    {
        inAGroupCommaIdEqVal(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getGroupEqVal().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupEqVal) temp[i]).apply(this);
            }
        }
        outAGroupCommaIdEqVal(node);
    }

    public void inAGroupEqVal(AGroupEqVal node)
    {
        defaultIn(node);
    }

    public void outAGroupEqVal(AGroupEqVal node)
    {
        defaultOut(node);
    }

    public void caseAGroupEqVal(AGroupEqVal node)
    {
        inAGroupEqVal(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAGroupEqVal(node);
    }

    public void inAGroupCommaId(AGroupCommaId node)
    {
        defaultIn(node);
    }

    public void outAGroupCommaId(AGroupCommaId node)
    {
        defaultOut(node);
    }

    public void caseAGroupCommaId(AGroupCommaId node)
    {
        inAGroupCommaId(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getGroupAsId().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupAsId) temp[i]).apply(this);
            }
        }
        outAGroupCommaId(node);
    }

    public void inAGroupMod(AGroupMod node)
    {
        defaultIn(node);
    }

    public void outAGroupMod(AGroupMod node)
    {
        defaultOut(node);
    }

    public void caseAGroupMod(AGroupMod node)
    {
        inAGroupMod(node);
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        {
            Object temp[] = node.getGroupAsId().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGroupAsId) temp[i]).apply(this);
            }
        }
        outAGroupMod(node);
    }

    public void inAGroupIdDot(AGroupIdDot node)
    {
        defaultIn(node);
    }

    public void outAGroupIdDot(AGroupIdDot node)
    {
        defaultOut(node);
    }

    public void caseAGroupIdDot(AGroupIdDot node)
    {
        inAGroupIdDot(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAGroupIdDot(node);
    }

    public void inAGroupCommaVal(AGroupCommaVal node)
    {
        defaultIn(node);
    }

    public void outAGroupCommaVal(AGroupCommaVal node)
    {
        defaultOut(node);
    }

    public void caseAGroupCommaVal(AGroupCommaVal node)
    {
        inAGroupCommaVal(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAGroupCommaVal(node);
    }

    public void inAGroupCommaExpr(AGroupCommaExpr node)
    {
        defaultIn(node);
    }

    public void outAGroupCommaExpr(AGroupCommaExpr node)
    {
        defaultOut(node);
    }

    public void caseAGroupCommaExpr(AGroupCommaExpr node)
    {
        inAGroupCommaExpr(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAGroupCommaExpr(node);
    }

    public void inAGroupAsId(AGroupAsId node)
    {
        defaultIn(node);
    }

    public void outAGroupAsId(AGroupAsId node)
    {
        defaultOut(node);
    }

    public void caseAGroupAsId(AGroupAsId node)
    {
        inAGroupAsId(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAGroupAsId(node);
    }

    public void inAEqualCompEqs(AEqualCompEqs node)
    {
        defaultIn(node);
    }

    public void outAEqualCompEqs(AEqualCompEqs node)
    {
        defaultOut(node);
    }

    public void caseAEqualCompEqs(AEqualCompEqs node)
    {
        inAEqualCompEqs(node);
        outAEqualCompEqs(node);
    }

    public void inAMinusEqualCompEqs(AMinusEqualCompEqs node)
    {
        defaultIn(node);
    }

    public void outAMinusEqualCompEqs(AMinusEqualCompEqs node)
    {
        defaultOut(node);
    }

    public void caseAMinusEqualCompEqs(AMinusEqualCompEqs node)
    {
        inAMinusEqualCompEqs(node);
        outAMinusEqualCompEqs(node);
    }

    public void inADivEqualCompEqs(ADivEqualCompEqs node)
    {
        defaultIn(node);
    }

    public void outADivEqualCompEqs(ADivEqualCompEqs node)
    {
        defaultOut(node);
    }

    public void caseADivEqualCompEqs(ADivEqualCompEqs node)
    {
        inADivEqualCompEqs(node);
        outADivEqualCompEqs(node);
    }

    public void inALessCompTypes(ALessCompTypes node)
    {
        defaultIn(node);
    }

    public void outALessCompTypes(ALessCompTypes node)
    {
        defaultOut(node);
    }

    public void caseALessCompTypes(ALessCompTypes node)
    {
        inALessCompTypes(node);
        outALessCompTypes(node);
    }

    public void inAGreatCompTypes(AGreatCompTypes node)
    {
        defaultIn(node);
    }

    public void outAGreatCompTypes(AGreatCompTypes node)
    {
        defaultOut(node);
    }

    public void caseAGreatCompTypes(AGreatCompTypes node)
    {
        inAGreatCompTypes(node);
        outAGreatCompTypes(node);
    }

    public void inAGreatEqualCompTypes(AGreatEqualCompTypes node)
    {
        defaultIn(node);
    }

    public void outAGreatEqualCompTypes(AGreatEqualCompTypes node)
    {
        defaultOut(node);
    }

    public void caseAGreatEqualCompTypes(AGreatEqualCompTypes node)
    {
        inAGreatEqualCompTypes(node);
        outAGreatEqualCompTypes(node);
    }

    public void inALessEqualCompTypes(ALessEqualCompTypes node)
    {
        defaultIn(node);
    }

    public void outALessEqualCompTypes(ALessEqualCompTypes node)
    {
        defaultOut(node);
    }

    public void caseALessEqualCompTypes(ALessEqualCompTypes node)
    {
        inALessEqualCompTypes(node);
        outALessEqualCompTypes(node);
    }

    public void inANotEqualCompTypes(ANotEqualCompTypes node)
    {
        defaultIn(node);
    }

    public void outANotEqualCompTypes(ANotEqualCompTypes node)
    {
        defaultOut(node);
    }

    public void caseANotEqualCompTypes(ANotEqualCompTypes node)
    {
        inANotEqualCompTypes(node);
        outANotEqualCompTypes(node);
    }

    public void inAEqualCompTypes(AEqualCompTypes node)
    {
        defaultIn(node);
    }

    public void outAEqualCompTypes(AEqualCompTypes node)
    {
        defaultOut(node);
    }

    public void caseAEqualCompTypes(AEqualCompTypes node)
    {
        inAEqualCompTypes(node);
        outAEqualCompTypes(node);
    }

    public void inAMaxMaxMin(AMaxMaxMin node)
    {
        defaultIn(node);
    }

    public void outAMaxMaxMin(AMaxMaxMin node)
    {
        defaultOut(node);
    }

    public void caseAMaxMaxMin(AMaxMaxMin node)
    {
        inAMaxMaxMin(node);
        outAMaxMaxMin(node);
    }

    public void inAMinMaxMin(AMinMaxMin node)
    {
        defaultIn(node);
    }

    public void outAMinMaxMin(AMinMaxMin node)
    {
        defaultOut(node);
    }

    public void caseAMinMaxMin(AMinMaxMin node)
    {
        inAMinMaxMin(node);
        outAMinMaxMin(node);
    }
}
