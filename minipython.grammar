/*
* Test Comments
*/

Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	tab = 9;
	plus = '+';
	minus = '-';
	mult = '*';
	dmult = '**';
	div = '/';
	eq = '=';
	exclam = '!';
	dictt = 'dict';
	def = 'def';
	logic_plus = '&&';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma=',';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	print = 'print';
	return = 'return';
	less = '<';
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	quote = '"';
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol; 
	number = digit+ | (digit+ '.' digit+);
	id = letter (letter | digit)*;
	string1 = '"'not_eol* '"';
	string2= '''not_eol* ''';
	/*EXTRA*/
	assert = 'assert';
	percent = '%';
	len = 'len';
	max = 'max';
	min = 'min';
	import = 'import';
	as = 'as';
	from = 'from';
	dot = '.';
	and = 'and';
	or = 'or';
	great_eq = '>=';
	less_eq = '<=';
	not_eq = '!=';
	equal = '==';
	none = 'None';
    for = 'for';
    in = 'in';
    minus_eq = '-=';
    div_eq = '/=';
    not = 'not';




Ignored Tokens
	blank, line_comment;

Productions
	
	
	import= import module as_id? complex_mod*|
		from module import id as_id? complex_comma_id* ;
	module= complex_id* id;
	comparison= {}comparison and_or comparison|
			{}not comparison|
			{}expression comp_types expression|
			true|
			false;		
	expression= {}expression math_types expression|
			{}id l_br expression r_br|
			{}function_call|
			{}value|
			{}id|
			{}len l_par expression r_par|
			{}max_min l_par value complex_val* r_par|
			{}l_br expression complex_expr* r_br;
	as_id= as id;
	comp_types= less|great|great_eq|less_eq|not_eq|equal;
	and_or= and |or;
	max_min= max | min;
	math_types= plus|minus|mult|dmult|div|percent;
	complex_comma_id= comma id as_id?;
	complex_mod= comma module as_id?;
	complex_id= dot id;
	complex_val= comma value;
	complex_expr= comma expression;
	arglist= {} expression complex_expr*;
	function_call= {} id l_par arglist? r_par;
    value = {fun_call} id dot function_call | {num}number |{str1}string1 | {str2}string2 | {none}none;
