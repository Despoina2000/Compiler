Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; #carriage return character \r
	lf = 10; #line-feed character \n
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	tab = 9;
	plus = '+';
	minus = '-';
	mult = '*';
	dmult = '**';
	div = '/';
	eq = '=';
	exclam = '!';
	dictt = 'dict';
	def = 'def';
	logic_plus = '&&';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma=',';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	print = 'print';
	return = 'return';
	less = '<';
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	quote = '"';
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol; 
	number = digit+ | (digit+ '.' digit+);
	id = letter (letter | digit)*;
	string1 = '"'not_eol* '"';
	string2= '''not_eol* ''';
	/*EXTRA*/
	assert = 'assert';
	percent = '%';
	len = 'len';
	max = 'max';
	min = 'min';
	import = 'import';
	as = 'as';
	from = 'from';
	dot = '.';
	and = 'and';
	or = 'or';
	great_eq = '>=';
	less_eq = '<=';
	not_eq = '!=';
	equal = '==';
	none = 'None';
	for = 'for';
	in = 'in';
	minus_eq = '-=';
	div_eq = '/=';
	not = 'not';

Ignored Tokens
	blank, line_comment;

Productions

	/*goal = group_func_stat* <EOF>;*/

	function = def id l_par argument? r_par semi statement;

	argument = id group_eq_val group_comma_id_eq_val*;

	statement = tab* if comparison semi statement|
				tab* while comparison semi statement|
				tab* for id in id semi statement|
				tab* return expression|
				tab* print expression group_comma_expr*|
				tab* id comp_eqs expression|
				tab* id l_br expression r_br eq expression|
				tab* assert expression group_comma_expr?|
				tab* function_call;
	
	import= import module group_as_id? group_mod*|
			from module import id group_as_id? group_comma_id* ;

	module= group_id* id;

	comparison= {}comparison and_or comparison|
			{}not comparison|
			{}expression comp_types expression|
			true|
			false;

	expression= {}expression math_types expression|
			{}id l_br expression r_br|
			{}function_call|
			{}value|
			{}id|
			{}len l_par expression r_par|
			{}max_min l_par value group_val* r_par|
			{}l_br expression group_expr* r_br;
/* GROUPS */
	group_func_stat = function|statement;
	group_comma_id_eq_val = comma id group_eq_val?;
	group_eq_val = eq value;
	group_comma_id= comma id group_as_id?;
	group_mod= comma module group_as_id?;
	group_dot_id= dot id;
	group_comma_val= comma value;
	group_comma_expr= comma expression;
	group_group_as_id= as id;
	
/* Arithmetic , Logical , Comparison Operators */
	comp_eqs = eq|minus_eq|div_eq;
	comp_types= less|great|great_eq|less_eq|not_eq|equal;
	and_or= and |or;
	max_min= max | min;
	math_types= plus|minus|mult|dmult|div|percent;
	
/**/
	arglist= {} expression group_expr*;
	function_call= {} id l_par arglist? r_par;
	value = {fun_call} id dot function_call | {num}number |{str1}string1 | {str2}string2 | {none}none;
